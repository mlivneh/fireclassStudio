================================================================================
COLLECTED FILES
From directory: C:\Users\Meir Livneh\Documents\fireclassStudio
Target folders: public, function, docs
================================================================================


========================================================================================================================
FILE: C:\Users\Meir Livneh\Documents\fireclassStudio\public\index.html
TYPE: .html
SIZE: 13752 characters
FOLDER: public
========================================================================================================================

<!DOCTYPE html>
<html lang="he" dir="rtl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Vibe Studio</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.1.1/css/all.min.css">
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        body { font-family: 'Segoe UI', 'Roboto', 'Arial', sans-serif; }
        .hidden { display: none; }
        [dir="rtl"] .form-input { text-align: right; }
        .card-base {
            transition: transform 0.2s, box-shadow 0.2s, border-color 0.2s;
            border: 2px solid transparent;
        }
        .card-base:hover {
            transform: translateY(-4px);
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
        }
        .card-base.selected {
            border-color: #3b82f6; /* blue-500 */
            transform: translateY(-2px);
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.3);
        }
        .tab-button.active {
            border-color: #3b82f6;
            background-color: #eff6ff;
            color: #1d4ed8;
        }
    </style>
</head>
<body class="bg-gray-100">

    <div id="login-container" class="min-h-screen flex items-center justify-center">
        <div class="max-w-md w-full bg-white p-8 rounded-lg shadow-md">
            <h1 class="text-2xl font-bold text-center text-blue-600 mb-2" data-lang="login_title">Vibe Studio</h1>
            <p class="text-center text-gray-600 mb-6" data-lang="login_prompt">הכנס את המייל לקבלת קישור כניסה מאובטח.</p>
            <form id="login-form">
                <input type="email" id="email-input" class="w-full p-3 border border-gray-300 rounded-md mb-4 focus:ring-2 focus:ring-blue-500 outline-none" placeholder="your@email.com" required>
                <button type="submit" id="send-link-btn" class="w-full bg-blue-600 text-white p-3 rounded-md font-semibold hover:bg-blue-700 transition-colors" data-lang="send_link_btn">שלח קישור</button>
            </form>
            <div id="feedback-message" class="mt-4 text-center"></div>
        </div>
    </div>

    <div id="studio-container" class="hidden">
        <header class="bg-white shadow-md p-4 flex justify-between items-center">
             <h1 class="text-xl font-bold text-blue-600" data-lang="studio_title">Vibe Studio</h1>
            <div class="flex items-center space-x-4">
                 <div class="flex items-center space-x-2 rtl:space-x-reverse">
                    <button id="lang-en-btn" class="px-3 py-1 text-sm rounded-md">EN</button>
                    <button id="lang-he-btn" class="px-3 py-1 text-sm rounded-md bg-blue-100 text-blue-700">HE</button>
                </div>
                <button id="get-last-link-btn" class="px-4 py-2 text-gray-700 hover:bg-gray-100 rounded-md">שחזר קישור אחרון</button>
                <button id="gallery-view-btn" class="px-4 py-2 text-gray-700 hover:bg-gray-100 rounded-md" data-lang="gallery_btn">גלריה</button>
                <button id="logout-btn" class="px-4 py-2 bg-red-500 text-white rounded-md hover:bg-red-600" data-lang="logout_btn">התנתק</button>
            </div>
        </header>
        <main class="p-4 md:p-8">
            <div class="mb-6 border-b border-gray-200">
                <nav class="-mb-px flex space-x-4 rtl:space-x-reverse" aria-label="Tabs">
                    <button id="tab-creator" class="tab-button active whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm">שלב 1: יצירה</button>
                    <button id="tab-preview" class="tab-button whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300">שלב 2: תצוגה מקדימה</button>
                    <button id="tab-publish" class="tab-button whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300">שלב 3: פרטים ופרסום</button>
                </nav>
            </div>
            <div>
                <div id="content-creator" class="grid grid-cols-1 lg:grid-cols-2 gap-8">
                    <div class="bg-white p-6 rounded-lg shadow-md space-y-6">
                        <div>
                            <h2 class="text-lg font-bold mb-4">שלב 1: בחר את סגנון ה-AI</h2>
                            <div id="persona-library" class="grid grid-cols-2 md:grid-cols-4 gap-4"></div>
                        </div>
                        <div>
                            <h2 class="text-lg font-bold mb-4">שלב 2: בחר את סוג הפעילות</h2>
                            <div id="prompt-library" class="grid grid-cols-2 md:grid-cols-3 gap-4"></div>
                        </div>
                    </div>
                    <div class="bg-white p-6 rounded-lg shadow-md">
                        <h2 class="text-lg font-bold mb-2">שלב 3: תאר את היישומון הרצוי</h2>
                        <textarea id="ai-prompt-input" rows="10" class="w-full border-gray-300 rounded-md shadow-sm p-3" placeholder="...מלא את הפרטים מהתבנית והוסף כל בקשה נוספת, למשל: 'שיהיה משחק מצחיק עם דמויות של חיות'"></textarea>
                        <button id="generate-ai-btn" class="mt-4 w-full bg-green-600 text-white p-3 rounded-md font-semibold hover:bg-green-700 transition-colors flex items-center justify-center">
                            <i class="fas fa-magic ltr:mr-2 rtl:ml-2"></i>
                            <span data-lang="generate_btn">צור עם AI</span>
                        </button>
                        
                        <button id="paste-external-code-btn" class="mt-2 w-full bg-gray-600 text-white p-3 rounded-md font-semibold hover:bg-gray-700 transition-colors flex items-center justify-center">
                            <i class="fas fa-paste ltr:mr-2 rtl:ml-2"></i>
                            <span data-lang="paste_external_code">הדבק קוד חיצוני</span>
                        </button>
                        
                         <div id="loading-spinner" class="hidden text-center p-8">
                            <i class="fas fa-spinner fa-spin fa-3x text-blue-600"></i>
                            <p class="mt-4 text-gray-600" data-lang="loading_ai">יוצר... אנא המתן...</p>
                        </div>
                    </div>
                </div>
                <div id="content-preview" class="hidden">
                     <div id="preview-container" class="w-full h-[70vh] border rounded-md shadow-inner overflow-hidden bg-white">
                       <iframe id="preview-iframe" class="w-full h-full"></iframe>
                    </div>
                </div>
                <div id="content-publish" class="hidden bg-white p-6 rounded-lg shadow-md max-w-2xl mx-auto">
                    <h2 class="text-lg font-bold mb-4 border-b pb-2">פרטי האפליקציה</h2>
                     <div class="space-y-4">
                        <div><label for="app-name" class="block text-sm font-medium text-gray-700">שם האפליקציה</label><input type="text" id="app-name" class="form-input mt-1 block w-full border-gray-300 rounded-md shadow-sm p-2"></div>
                        <div><label for="grade-level" class="block text-sm font-bold mb-4">שכבת גיל</label><input type="text" id="grade-level" class="form-input mt-1 block w-full border-gray-300 rounded-md shadow-sm p-2"></div>
                        <div><label for="domain-input" class="block text-sm font-medium text-gray-700">תחום</label><input type="text" id="domain-input" class="form-input mt-1 block w-full border-gray-300 rounded-md shadow-sm p-2"></div>
                        <div><label for="sub-domain-input" class="block text-sm font-medium text-gray-700">תת-תחום</label><input type="text" id="sub-domain-input" class="form-input mt-1 block w-full border-gray-300 rounded-md shadow-sm p-2"></div>
                        <div><label for="pedagogy" class="block text-sm font-medium text-gray-700">הסבר פדגוגי</label><textarea id="pedagogy" rows="4" class="form-input mt-1 block w-full border-gray-300 rounded-md shadow-sm p-2"></textarea></div>
                        <button id="publish-btn" class="mt-4 w-full bg-blue-600 text-white p-3 rounded-md font-semibold hover:bg-blue-700 transition-colors flex items-center justify-center">
                            <i class="fas fa-rocket ltr:mr-2 rtl:ml-2"></i>
                            <span>פרסם לגלריה</span>
                        </button>
                    </div>
                </div>
            </div>
        </main>
    </div>
    
    <div id="gallery-container" class="hidden">
        <header class="bg-white shadow-md p-4 flex justify-between items-center">
            <h1 class="text-xl font-bold text-blue-600">גלריית היישומונים</h1>
            <button id="back-to-studio-btn" class="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600">חזור לסטודיו</button>
        </header>
        <main class="p-4 md:p-8">
            <div class="overflow-x-auto bg-white rounded-lg shadow">
                <table id="gallery-table" class="min-w-full divide-y divide-gray-200">
                    <thead class="bg-gray-50">
                        <tr>
                            <th class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase">שם היישומון</th>
                            <th class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase">יוצר</th>
                            <th class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase">מוסד</th>
                            <th class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase">הסבר פדגוגי</th>
                            <th class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase">פעולות</th>
                        </tr>
                    </thead>
                    <tbody id="gallery-table-body" class="bg-white divide-y divide-gray-200"></tbody>
                </table>
            </div>
        </main>
    </div>

    <div id="text-viewer-modal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center">
        <div class="relative mx-auto p-5 border w-full max-w-2xl shadow-lg rounded-md bg-white">
            <h3 id="text-viewer-title" class="text-lg font-medium text-gray-900 mb-4"></h3>
            <div id="text-viewer-content" class="text-gray-600 max-h-96 overflow-y-auto whitespace-pre-wrap"></div>
            <div class="mt-6 text-right">
                <button id="close-text-viewer-modal" class="px-4 py-2 bg-gray-500 text-white text-base font-medium rounded-md shadow-sm hover:bg-gray-600">סגור</button>
            </div>
        </div>
    </div>
    
    <div id="results-modal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full flex items-center justify-center">
        <div class="relative mx-auto p-5 border w-full max-w-md shadow-lg rounded-md bg-white">
            <div class="mt-3 text-center">
                <div class="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-green-100"><i class="fas fa-check h-6 w-6 text-green-600"></i></div>
                <h3 class="text-lg leading-6 font-medium text-gray-900 mt-2">האפליקציה פורסמה בהצלחה!</h3>
                <div class="mt-4 px-7 py-3 space-y-4">
                    <p class="text-sm text-gray-500">הקישור המקוצר מוכן לשיתוף:</p>
                    <input id="result-short-url" type="text" readonly class="w-full bg-gray-100 p-2 rounded border text-center">
                    <p class="text-sm text-gray-500">קוד QR לסריקה מהירה:</p>
                    <img id="result-qr-code" src="" alt="QR Code" class="mx-auto border p-1">
                </div>
                <div class="items-center px-4 py-3">
                    <button id="close-results-modal" class="px-4 py-2 bg-gray-500 text-white text-base font-medium rounded-md w-full shadow-sm hover:bg-gray-600">סגור</button>
                </div>
            </div>
        </div>
    </div>
    
    <div id="paste-code-modal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center">
        <div class="relative mx-auto p-5 border w-full max-w-3xl shadow-lg rounded-md bg-white">
            <h3 class="text-lg font-medium text-gray-900 mb-4" data-lang="paste_external_code_title">הדבקת קוד חיצוני</h3>
            <p class="text-sm text-gray-600 mb-4" data-lang="paste_external_code_desc">הדבק כאן קוד HTML מלא (כולל תגיות html, head, body) שנוצר ממקור חיצוני (כמו Claude או ChatGPT).</p>
            <textarea id="external-code-textarea" class="w-full h-80 p-2 border border-gray-300 rounded-md font-mono text-sm" placeholder="<html>...</html>"></textarea>
            <div class="mt-4 flex justify-end space-x-2 rtl:space-x-reverse">
                <button id="cancel-paste-modal" class="px-4 py-2 bg-gray-500 text-white text-base font-medium rounded-md shadow-sm hover:bg-gray-600" data-lang="cancel">בטל</button>
                <button id="load-pasted-code-btn" class="px-4 py-2 bg-blue-600 text-white text-base font-medium rounded-md shadow-sm hover:bg-blue-700" data-lang="load_pasted_code">טען לתצוגה מקדימה</button>
            </div>
        </div>
    </div>
    <script src="https://www.gstatic.com/firebasejs/8.10.1/firebase-app.js"></script>
    <script src="https://www.gstatic.com/firebasejs/8.10.1/firebase-auth.js"></script>
    <script src="https://www.gstatic.com/firebasejs/8.10.1/firebase-functions.js"></script>
    <script src="https://www.gstatic.com/firebasejs/8.10.1/firebase-firestore.js"></script>
    <script src="js/firebase-config.js"></script>
    <script type="module" src="js/studio.js"></script>
</body>
</html>



========================================================================================================================
FILE: C:\Users\Meir Livneh\Documents\fireclassStudio\public\test_login.html
TYPE: .html
SIZE: 3657 characters
FOLDER: public
========================================================================================================================

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Firebase Auth Test</title>
    <style>
        body { font-family: sans-serif; padding: 2em; }
        input { font-size: 1.2em; padding: 5px; }
        button { font-size: 1.2em; padding: 5px; }
        #status { margin-top: 20px; font-weight: bold; }
    </style>
</head>
<body>
    <h1>Firebase Auth Test Page</h1>
    <div id="login-view">
        <h3>Send Magic Link</h3>
        <input type="email" id="email-input" placeholder="Enter your email">
        <button id="send-link-btn">Send Link</button>
    </div>
    <div id="status">Status: Not logged in</div>

    <script src="js/firebase-config.js"></script>
    <script src="https://www.gstatic.com/firebasejs/8.10.1/firebase-app.js"></script>
    <script src="https://www.gstatic.com/firebasejs/8.10.1/firebase-auth.js"></script>

    <script>
        // Initialize Firebase
        firebase.initializeApp(firebaseConfig);
        const auth = firebase.auth();

        const emailInput = document.getElementById('email-input');
        const sendLinkBtn = document.getElementById('send-link-btn');
        const statusDiv = document.getElementById('status');

        // --- 1. Auth State Listener ---
        auth.onAuthStateChanged(user => {
            if (user) {
                console.log("SUCCESS: User is signed in.", user);
                statusDiv.textContent = `Status: Logged in as ${user.email}`;
                statusDiv.style.color = 'green';
            } else {
                console.log("INFO: User is signed out.");
                statusDiv.textContent = 'Status: Not logged in';
                statusDiv.style.color = 'red';
            }
        });

        // --- 2. Send Link Logic ---
        sendLinkBtn.addEventListener('click', () => {
            const email = emailInput.value;
            if (!email) {
                alert("Please enter an email.");
                return;
            }

            const actionCodeSettings = {
                url: window.location.href, // We complete the sign-in on this same test page
                handleCodeInApp: true,
            };

            console.log("Attempting to send sign-in link to:", email);
            auth.sendSignInLinkToEmail(email, actionCodeSettings)
                .then(() => {
                    console.log("SUCCESS: Link sent. Check your email.");
                    alert("Link sent! Please check your email and click the link to sign in.");
                    window.localStorage.setItem('emailForSignIn', email);
                })
                .catch((error) => {
                    console.error("ERROR SENDING LINK:", error);
                    alert(`Failed to send link: ${error.message}`);
                });
        });

        // --- 3. Handle Link Click Return ---
        if (auth.isSignInWithEmailLink(window.location.href)) {
            let email = window.localStorage.getItem('emailForSignIn');
            if (!email) {
                email = window.prompt('Please provide your email for confirmation');
            }

            console.log("Attempting to sign in with email link...");
            auth.signInWithEmailLink(email, window.location.href)
                .then((result) => {
                    console.log("SUCCESS: Signed in with link.", result);
                    window.localStorage.removeItem('emailForSignIn');
                })
                .catch((error) => {
                    console.error("ERROR SIGNING IN:", error);
                    alert(`Failed to sign in: ${error.message}`);
                });
        }
    </script>
</body>
</html>


========================================================================================================================
FILE: C:\Users\Meir Livneh\Documents\fireclassStudio\public\js\_studio.js
TYPE: .js
SIZE: 16671 characters
FOLDER: public
========================================================================================================================

// --- Initialize Firebase ---
firebase.initializeApp(firebaseConfig);
const auth = firebase.auth();
const functions = firebase.functions();
const firestore = firebase.firestore();

// --- I18N Translations ---
const translations = {
    en: { login_title: "Vibe Studio", login_prompt: "Enter your email to get a secure sign-in link.", send_link_btn: "Send Link", studio_title: "Vibe Studio", gallery_btn: "Gallery", logout_btn: "Logout", generate_btn: "Generate with AI", loading_ai: "Generating... Please wait...", },
    he: { login_title: "Vibe Studio", login_prompt: "הכנס את המייל לקבלת קישור כניסה מאובטח.", send_link_btn: "שלח קישור", studio_title: "Vibe Studio", gallery_btn: "גלריה", logout_btn: "התנתק", generate_btn: "צור עם AI", loading_ai: "יוצר... אנא המתן...", }
};

// --- Global State ---
let currentLanguage = 'he';
let generatedHtmlContent = ''; 
let personasData = [];
let promptsData = [];
let selectedPersonaId = null;
let selectedPromptId = null;

// --- DOM Element References ---
const loginContainer = document.getElementById('login-container');
const studioContainer = document.getElementById('studio-container');
const galleryContainer = document.getElementById('gallery-container');
const loginForm = document.getElementById('login-form');
const emailInput = document.getElementById('email-input');
const sendLinkBtn = document.getElementById('send-link-btn');
const feedbackMessage = document.getElementById('feedback-message');
const logoutBtn = document.getElementById('logout-btn');
const langEnBtn = document.getElementById('lang-en-btn');
const langHeBtn = document.getElementById('lang-he-btn');
const getLastLinkBtn = document.getElementById('get-last-link-btn');
const galleryViewBtn = document.getElementById('gallery-view-btn');
const backToStudioBtn = document.getElementById('back-to-studio-btn');
const tabs = { creator: document.getElementById('tab-creator'), preview: document.getElementById('tab-preview'), publish: document.getElementById('tab-publish') };
const contents = { creator: document.getElementById('content-creator'), preview: document.getElementById('content-preview'), publish: document.getElementById('content-publish') };
const personaLibrary = document.getElementById('persona-library');
const promptLibrary = document.getElementById('prompt-library');
const aiPromptInput = document.getElementById('ai-prompt-input');
const generateAiBtn = document.getElementById('generate-ai-btn');
const loadingSpinner = document.getElementById('loading-spinner');
const previewIframe = document.getElementById('preview-iframe');
const publishBtn = document.getElementById('publish-btn');
const resultsModal = document.getElementById('results-modal');
const closeResultsModalBtn = document.getElementById('close-results-modal');
const resultShortUrl = document.getElementById('result-short-url');
const resultQrCode = document.getElementById('result-qr-code');

// =================================================================
// START: LOGIN & APP INITIALIZATION
// =================================================================
document.addEventListener('DOMContentLoaded', () => {
    
    auth.onAuthStateChanged(user => {
        if (user) {
            loginContainer.classList.add('hidden');
            studioContainer.classList.remove('hidden');
            galleryContainer.classList.add('hidden');
            initializeStudio();
        } else {
            loginContainer.classList.remove('hidden');
            studioContainer.classList.add('hidden');
            galleryContainer.classList.add('hidden');
        }
    });

    if (loginForm) {
        loginForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            const originalBtnText = sendLinkBtn.textContent;
            sendLinkBtn.disabled = true;
            sendLinkBtn.textContent = '...';
            try {
                await auth.sendSignInLinkToEmail(emailInput.value, { url: window.location.href, handleCodeInApp: true });
                window.localStorage.setItem('emailForSignIn', emailInput.value);
                feedbackMessage.textContent = 'קישור נשלח! בדוק את המייל.';
                feedbackMessage.className = 'mt-4 text-center text-green-600';
            } catch (error) {
                console.error("Error sending login link:", error);
                feedbackMessage.textContent = `שגיאה בשליחת הקישור: ${error.message}`;
                feedbackMessage.className = 'mt-4 text-center text-red-600';
            } finally {
                sendLinkBtn.disabled = false;
                sendLinkBtn.textContent = originalBtnText;
            }
        });
    }

    if (auth.isSignInWithEmailLink(window.location.href)) {
        let email = window.localStorage.getItem('emailForSignIn');
        if (!email) { email = window.prompt('אנא הזן את המייל לאימות'); }
        if (email) {
            auth.signInWithEmailLink(email, window.location.href)
                .then(() => {
                    window.localStorage.removeItem('emailForSignIn');
                    window.history.replaceState({}, document.title, window.location.pathname);
                })
                .catch(error => { console.error("Error signing in:", error); });
        }
    }
});

function initializeStudio() {
    setLanguage('he');
    loadDynamicContent();
    setupEventListeners();
}

function setupEventListeners() {
    logoutBtn.addEventListener('click', () => auth.signOut());
    langEnBtn.addEventListener('click', () => setLanguage('en'));
    langHeBtn.addEventListener('click', () => setLanguage('he'));
    getLastLinkBtn.addEventListener('click', getMyLastAppLink);
    galleryViewBtn.addEventListener('click', () => {
        studioContainer.classList.add('hidden');
        galleryContainer.classList.remove('hidden');
        loadGallery();
    });
    backToStudioBtn.addEventListener('click', () => {
        galleryContainer.classList.add('hidden');
        studioContainer.classList.remove('hidden');
    });
    Object.keys(tabs).forEach(tabName => {
        tabs[tabName].addEventListener('click', () => showTab(tabName));
    });
    generateAiBtn.addEventListener('click', generateAiApp);
    publishBtn.addEventListener('click', publishApp);
    closeResultsModalBtn.addEventListener('click', () => {
        resultsModal.classList.add('hidden');
    });
}
// =================================================================
// END: LOGIN & APP INITIALIZATION
// =================================================================

function showTab(tabName) {
    Object.values(contents).forEach(content => content.classList.add('hidden'));
    Object.values(tabs).forEach(tab => tab.classList.remove('active'));
    contents[tabName].classList.remove('hidden');
    tabs[tabName].classList.add('active');
}

function setLanguage(lang) {
    currentLanguage = lang;
    document.documentElement.lang = lang;
    document.documentElement.dir = lang === 'he' ? 'rtl' : 'ltr';
    document.querySelectorAll('[data-lang]').forEach(element => {
        const key = element.getAttribute('data-lang');
        if (translations[lang] && translations[lang][key]) {
            element.textContent = translations[lang][key];
        }
    });
    renderCards();
    langEnBtn.classList.toggle('bg-blue-100', lang === 'en');
    langHeBtn.classList.toggle('bg-blue-100', lang === 'he');
}

async function loadDynamicContent() {
    try {
        const [personasRes, promptsRes] = await Promise.all([
            fetch('./data/personas.json'),
            fetch('./data/prompts.json')
        ]);
        personasData = (await personasRes.json()).personas;
        promptsData = (await promptsRes.json()).prompts;
        renderCards();
    } catch (error) { console.error("Failed to load dynamic content:", error); }
}

function renderCards() {
    personaLibrary.innerHTML = personasData.map(p => `
        <div class="card-base p-4 bg-white rounded-lg shadow-md text-center cursor-pointer ${selectedPersonaId === p.id ? 'selected' : ''}" data-id="${p.id}">
            <i class="${p.icon} fa-2x text-blue-500 mb-2"></i>
            <h3 class="font-bold">${p.title[currentLanguage]}</h3>
            <p class="text-sm text-gray-600">${p.description[currentLanguage]}</p>
        </div>
    `).join('');
    promptLibrary.innerHTML = promptsData.map(p => `
        <div class="card-base p-4 bg-white rounded-lg shadow-md text-center cursor-pointer ${selectedPromptId === p.id ? 'selected' : ''}" data-id="${p.id}">
            <i class="${p.icon} fa-2x text-green-500 mb-2"></i>
            <h3 class="font-bold">${p.title[currentLanguage]}</h3>
            <p class="text-sm text-gray-600">${p.description[currentLanguage]}</p>
        </div>
    `).join('');
    addCardEventListeners();
}

function addCardEventListeners() {
    personaLibrary.querySelectorAll('.card-base').forEach(card => {
        card.addEventListener('click', (e) => {
            document.querySelectorAll('#persona-library .card-base').forEach(c => c.classList.remove('selected'));
            e.currentTarget.classList.add('selected');
            selectedPersonaId = e.currentTarget.dataset.id;
        });
    });
    promptLibrary.querySelectorAll('.card-base').forEach(card => {
        card.addEventListener('click', (e) => {
            document.querySelectorAll('#prompt-library .card-base').forEach(c => c.classList.remove('selected'));
            e.currentTarget.classList.add('selected');
            selectedPromptId = e.currentTarget.dataset.id;
            const selectedPrompt = promptsData.find(p => p.id === selectedPromptId);
            if (selectedPrompt) { aiPromptInput.value = selectedPrompt.base_prompt[currentLanguage]; }
        });
    });
}

async function generateAiApp() {
    if (!selectedPersonaId || !selectedPromptId || !aiPromptInput.value.trim()) {
        alert("אנא בחר סגנון AI, סוג פעילות, ומלא את תיאור היישומון.");
        return;
    }
    const persona = personasData.find(p => p.id === selectedPersonaId);
    const finalPrompt = `${persona.system_prompt[currentLanguage]}\n\nTeacher's Request:\n${aiPromptInput.value.trim()}`;
    loadingSpinner.classList.remove('hidden');
    generateAiBtn.disabled = true;
    try {
        const askVibeAI = functions.httpsCallable('askVibeAI');
        const result = await askVibeAI({ prompt: finalPrompt, language: currentLanguage });
        if (!result.data || !result.data.htmlCode || !result.data.metadata) {
             throw new Error("Invalid response structure from AI function.");
        }
        const { htmlCode, metadata } = result.data;
        document.getElementById('app-name').value = metadata.appName || '';
        document.getElementById('grade-level').value = metadata.gradeLevel || '';
        document.getElementById('domain-input').value = metadata.domain || '';
        document.getElementById('sub-domain-input').value = metadata.subDomain || '';
        document.getElementById('pedagogy').value = metadata.pedagogicalExplanation || '';
        generatedHtmlContent = htmlCode || ''; 
        previewIframe.srcdoc = generatedHtmlContent; 
        showTab('preview');
    } catch (error) {
        console.error("Error calling AI function:", error);
        alert(`Error generating app: ${error.message}`);
    } finally {
        loadingSpinner.classList.add('hidden');
        generateAiBtn.disabled = false;
    }
}

async function publishApp() {
    const appData = {
        appName: document.getElementById('app-name').value.trim(),
        gradeLevel: document.getElementById('grade-level').value.trim(),
        domain: document.getElementById('domain-input').value.trim(),
        subDomain: document.getElementById('sub-domain-input').value.trim(),
        pedagogy: document.getElementById('pedagogy').value.trim(),
        htmlContent: generatedHtmlContent
    };
    if (!appData.appName || !generatedHtmlContent) {
        alert('App Name and generated content are required.');
        return;
    }
    const originalBtnSpan = publishBtn.querySelector('span');
    const originalBtnText = originalBtnSpan ? originalBtnSpan.textContent : 'פרסם לגלריה';
    publishBtn.disabled = true;
    if (originalBtnSpan) originalBtnSpan.textContent = '...';
    try {
        const publishHtml = functions.httpsCallable('publishHtml');
        const result = await publishHtml(appData);
        if (result.data.success) {
            resultShortUrl.value = result.data.shortUrl;
            resultQrCode.src = result.data.qrCodeDataUrl || '';
            resultQrCode.classList.toggle('hidden', !result.data.qrCodeDataUrl);
            resultsModal.classList.remove('hidden');
        } else {
            throw new Error(result.data.error || 'Unknown publishing error.');
        }
    } catch (error) {
        console.error("Error publishing:", error);
        alert(`Failed to publish: ${error.message}`);
    } finally {
        publishBtn.disabled = false;
        if (originalBtnSpan) originalBtnSpan.textContent = originalBtnText;
    }
}

async function getMyLastAppLink() {
    if (!auth.currentUser) { alert("You must be logged in."); return; }
    try {
        const querySnapshot = await firestore.collection("community_apps")
            .where("teacher_uid", "==", auth.currentUser.uid)
            .orderBy("createdAt", "desc").limit(1).get();
        if (querySnapshot.empty) { alert("לא נמצאו יישומונים שפרסמת."); return; }
        const lastApp = querySnapshot.docs[0].data();
        resultShortUrl.value = lastApp.shortUrl || lastApp.app_url;
        if (lastApp.qrCodeDataUrl) {
            resultQrCode.src = lastApp.qrCodeDataUrl;
            resultQrCode.classList.remove('hidden');
        } else {
             resultQrCode.classList.add('hidden');
        }
        resultsModal.classList.remove('hidden');
    } catch (error) {
        console.error("Error getting last link:", error);
        alert("שגיאה בשליפת הקישור האחרון.");
    }
}

async function loadGallery() {
    const galleryGrid = document.getElementById('gallery-grid');
    galleryGrid.innerHTML = `<div class="text-center p-8 col-span-full"><i class="fas fa-spinner fa-spin fa-2x text-gray-500"></i><p class="mt-2 text-gray-600">טוען יישומונים...</p></div>`;
    try {
        const querySnapshot = await firestore.collection("community_apps").orderBy("createdAt", "desc").get();
        if (querySnapshot.empty) {
            galleryGrid.innerHTML = `<p class="text-center p-8 text-gray-700 col-span-full">הגלריה ריקה. צור ופרסם את היישומון הראשון שלך!</p>`;
            return;
        }
        galleryGrid.innerHTML = querySnapshot.docs.map(doc => {
            const app = doc.data();
            const appName = app.appName || 'ללא שם';
            const teacherName = app.teacher_name || 'לא ידוע';
            const schoolCode = app.schoolCode || '000000000';
            const shortUrl = app.shortUrl || app.app_url;
            const qrCodeUrl = app.qrCodeDataUrl || '';
            return `
                <div class="bg-white p-6 rounded-lg shadow-lg space-y-4 flex flex-col">
                    <div>
                        <h3 class="font-bold text-lg text-blue-700">${appName}</h3>
                        <p class="text-sm text-gray-500">נוצר על ידי: ${teacherName} | מוסד: ${schoolCode}</p>
                    </div>
                    <div class="flex-grow">
                        <p class="text-gray-600"><strong>תחום:</strong> ${app.domain || ''}</p>
                        <p class="text-gray-600"><strong>שכבת גיל:</strong> ${app.gradeLevel || ''}</p>
                    </div>
                    <div class="mt-4 border-t pt-4">
                        <label class="block text-sm font-medium text-gray-700">קישור מקוצר (Bit.ly)</label>
                        <div class="flex">
                            <input type="text" readonly value="${shortUrl}" class="mt-1 block w-full border-gray-300 rounded-l-md shadow-sm p-2 bg-gray-100">
                            <button onclick="navigator.clipboard.writeText('${shortUrl}')" class="bg-gray-200 hover:bg-gray-300 px-3 rounded-r-md">
                                <i class="fas fa-copy"></i>
                            </button>
                        </div>
                    </div>
                    ${qrCodeUrl ? `<div class="text-center"><img src="${qrCodeUrl}" alt="QR Code" class="mx-auto border p-1 w-32 h-32"></div>` : ''}
                </div>
            `;
        }).join('');
    } catch (error) {
        console.error("Error loading gallery:", error);
        galleryGrid.innerHTML = `<p class="text-center p-8 text-red-500 col-span-full">שגיאה בטעינת הגלריה.</p>`;
    }
}


========================================================================================================================
FILE: C:\Users\Meir Livneh\Documents\fireclassStudio\public\js\firebase-config.js
TYPE: .js
SIZE: 408 characters
FOLDER: public
========================================================================================================================

// For Firebase JS SDK v7.20.0 and later, measurementId is optional
const firebaseConfig = {
  apiKey: "AIzaSyByKMGr2knkWL8Ps_4DoA9KOJ8Ta0IjN-I",
  authDomain: "fireclassstudio.firebaseapp.com",
  projectId: "fireclassstudio",
  storageBucket: "fireclassstudio.firebasestorage.app",
  messagingSenderId: "900608873995",
  appId: "1:900608873995:web:130533a437b1f168f7190e",
  measurementId: "G-RN24RDVPJ4"
};


========================================================================================================================
FILE: C:\Users\Meir Livneh\Documents\fireclassStudio\public\js\studio.js
TYPE: .js
SIZE: 34441 characters
FOLDER: public
========================================================================================================================

// --- Initialize Firebase and DOM elements ---
firebase.initializeApp(firebaseConfig);
const auth = firebase.auth();
const functions = firebase.functions();
const firestore = firebase.firestore();

// --- I18N Translations ---
const translations = {
    en: { 
        login_title: "Vibe Studio", 
        login_prompt: "Enter your email to get a secure sign-in link.", 
        send_link_btn: "Send Link", 
        studio_title: "Vibe Studio", 
        gallery_btn: "Gallery", 
        logout_btn: "Logout", 
        generate_btn: "Generate with AI", 
        refine_btn: "Refine App",
        loading_ai: "Generating... Please wait...", 
        loading_refine: "Refining... Please wait...",
        paste_external_code: "Paste External Code",
        paste_external_code_title: "Paste External Code",
        paste_external_code_desc: "Paste here complete HTML code (including html, head, body tags) generated from external sources (like Claude or ChatGPT).",
        cancel: "Cancel",
        load_pasted_code: "Load to Preview"
    },
    he: { 
        login_title: "Vibe Studio", 
        login_prompt: "הכנס את המייל לקבלת קישור כניסה מאובטח.", 
        send_link_btn: "שלח קישור", 
        studio_title: "Vibe Studio", 
        gallery_btn: "גלריה", 
        logout_btn: "התנתק", 
        generate_btn: "צור עם AI", 
        refine_btn: "שפר יישומון",
        loading_ai: "יוצר... אנא המתן...", 
        loading_refine: "משפר... אנא המתן...",
        paste_external_code: "הדבק קוד חיצוני",
        paste_external_code_title: "הדבקת קוד חיצוני",
        paste_external_code_desc: "הדבק כאן קוד HTML מלא (כולל תגיות html, head, body) שנוצר ממקור חיצוני (כמו Claude או ChatGPT).",
        cancel: "בטל",
        load_pasted_code: "טען לתצוגה מקדימה"
    }
};

// --- Global State ---
let currentLanguage = 'he';
let generatedHtmlContent = ''; 
let personasData = [];
let promptsData = [];
let selectedPersonaId = null;
let selectedPromptId = null;
let conversationHistory = [];
let generationCount = 0;
let currentSessionId = null;
let originalPromptData = null;

// --- DOM Element References ---
const loginContainer = document.getElementById('login-container');
const studioContainer = document.getElementById('studio-container');
const galleryContainer = document.getElementById('gallery-container');
const loginForm = document.getElementById('login-form');
const emailInput = document.getElementById('email-input');
const sendLinkBtn = document.getElementById('send-link-btn');
const feedbackMessage = document.getElementById('feedback-message');
const logoutBtn = document.getElementById('logout-btn');
const langEnBtn = document.getElementById('lang-en-btn');
const langHeBtn = document.getElementById('lang-he-btn');
const getLastLinkBtn = document.getElementById('get-last-link-btn');
const galleryViewBtn = document.getElementById('gallery-view-btn');
const backToStudioBtn = document.getElementById('back-to-studio-btn');
const tabs = { creator: document.getElementById('tab-creator'), preview: document.getElementById('tab-preview'), publish: document.getElementById('tab-publish') };
const contents = { creator: document.getElementById('content-creator'), preview: document.getElementById('content-preview'), publish: document.getElementById('content-publish') };
const personaLibrary = document.getElementById('persona-library');
const promptLibrary = document.getElementById('prompt-library');
const aiPromptInput = document.getElementById('ai-prompt-input');
const generateAiBtn = document.getElementById('generate-ai-btn');
const loadingSpinner = document.getElementById('loading-spinner');
const previewIframe = document.getElementById('preview-iframe');
const publishBtn = document.getElementById('publish-btn');
const resultsModal = document.getElementById('results-modal');
const closeResultsModalBtn = document.getElementById('close-results-modal');
const resultShortUrl = document.getElementById('result-short-url');
const resultQrCode = document.getElementById('result-qr-code');

// --- NEW: Refinement UI Elements ---
const refinementContainer = document.createElement('div');
const refinementInput = document.createElement('textarea');
const refineBtn = document.createElement('button');
const conversationLog = document.createElement('div');

// --- Text Viewer Modal Elements ---
const textViewerModal = document.getElementById('text-viewer-modal');
const textViewerTitle = document.getElementById('text-viewer-title');
const textViewerContent = document.getElementById('text-viewer-content');
const closeTextViewerModalBtn = document.getElementById('close-text-viewer-modal');

// --- NEW: External Code Paste Modal Elements ---
const pasteCodeModal = document.getElementById('paste-code-modal');
const pasteExternalCodeBtn = document.getElementById('paste-external-code-btn');
const cancelPasteModalBtn = document.getElementById('cancel-paste-modal');
const loadPastedCodeBtn = document.getElementById('load-pasted-code-btn');
const externalCodeTextarea = document.getElementById('external-code-textarea');

// =================================================================
// START: LOGIN & APP INITIALIZATION
// =================================================================
document.addEventListener('DOMContentLoaded', () => {
    
    auth.onAuthStateChanged(user => {
        if (user) {
            loginContainer.classList.add('hidden');
            studioContainer.classList.remove('hidden');
            galleryContainer.classList.add('hidden');
            initializeStudio();
        } else {
            loginContainer.classList.remove('hidden');
            studioContainer.classList.add('hidden');
            galleryContainer.classList.add('hidden');
        }
    });

    if (loginForm) {
        loginForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            const originalBtnText = sendLinkBtn.textContent;
            sendLinkBtn.disabled = true;
            sendLinkBtn.textContent = '...';
            try {
                await auth.sendSignInLinkToEmail(emailInput.value, { url: window.location.href, handleCodeInApp: true });
                window.localStorage.setItem('emailForSignIn', emailInput.value);
                feedbackMessage.textContent = 'קישור נשלח! בדוק את המייל.';
                feedbackMessage.className = 'mt-4 text-center text-green-600';
            } catch (error) {
                console.error("Error sending login link:", error);
                feedbackMessage.textContent = `שגיאה בשליחת הקישור: ${error.message}`;
                feedbackMessage.className = 'mt-4 text-center text-red-600';
            } finally {
                sendLinkBtn.disabled = false;
                sendLinkBtn.textContent = originalBtnText;
            }
        });
    }

    if (auth.isSignInWithEmailLink(window.location.href)) {
        let email = window.localStorage.getItem('emailForSignIn');
        if (!email) { email = window.prompt('אנא הזן את המייל לאימות'); }
        if (email) {
            auth.signInWithEmailLink(email, window.location.href)
                .then(() => {
                    window.localStorage.removeItem('emailForSignIn');
                    window.history.replaceState({}, document.title, window.location.pathname);
                })
                .catch(error => { console.error("Error signing in:", error); });
        }
    }
});

function initializeStudio() {
    setLanguage('he');
    loadDynamicContent();
    setupEventListeners();
    setupRefinementUI();
}

// --- Setup Refinement UI (NEW v2.1) ---
function setupRefinementUI() {
    // Create refinement container
    refinementContainer.className = 'mt-6 p-4 bg-blue-50 border border-blue-200 rounded-lg hidden';
    refinementContainer.id = 'refinement-container';
    
    // Title
    const refinementTitle = document.createElement('h3');
    refinementTitle.className = 'text-lg font-bold mb-3 text-blue-800';
    refinementTitle.textContent = currentLanguage === 'he' ? 'שיח רציף עם AI' : 'Continuous AI Dialogue';
    
    // Input field
    refinementInput.className = 'w-full border-gray-300 rounded-md shadow-sm p-3 mb-3';
    refinementInput.rows = 3;
    refinementInput.placeholder = currentLanguage === 'he' 
        ? 'הקלד בקשת שיפור, למשל: "הוסף טיימר של 30 שניות" או "שנה את הצבע לכחול"'
        : 'Type refinement request, e.g.: "Add a 30-second timer" or "Change color to blue"';
    
    // Refine button
    refineBtn.className = 'w-full bg-blue-600 text-white p-3 rounded-md font-semibold hover:bg-blue-700 transition-colors flex items-center justify-center mb-3';
    refineBtn.innerHTML = `<i class="fas fa-magic mr-2"></i><span data-lang="refine_btn">${translations[currentLanguage].refine_btn}</span>`;
    refineBtn.addEventListener('click', refineApp);
    
    // Save/Load buttons container
    const sessionButtonsContainer = document.createElement('div');
    sessionButtonsContainer.className = 'flex gap-2 mb-3';
    
    // Save session button
    const saveSessionBtn = document.createElement('button');
    saveSessionBtn.className = 'flex-1 bg-green-600 text-white p-2 rounded-md font-semibold hover:bg-green-700 transition-colors flex items-center justify-center';
    saveSessionBtn.innerHTML = `<i class="fas fa-save mr-1"></i><span>שמור</span>`;
    saveSessionBtn.addEventListener('click', saveCurrentSession);
    
    // Load session button
    const loadSessionBtn = document.createElement('button');
    loadSessionBtn.className = 'flex-1 bg-purple-600 text-white p-2 rounded-md font-semibold hover:bg-purple-700 transition-colors flex items-center justify-center';
    loadSessionBtn.innerHTML = `<i class="fas fa-folder-open mr-1"></i><span>טען</span>`;
    loadSessionBtn.addEventListener('click', showLoadSessionModal);
    
    sessionButtonsContainer.appendChild(saveSessionBtn);
    sessionButtonsContainer.appendChild(loadSessionBtn);
    
    // Conversation log
    conversationLog.className = 'mt-4 max-h-40 overflow-y-auto bg-white p-3 rounded border';
    conversationLog.innerHTML = '<p class="text-gray-500 text-sm">היסטוריית השיח תוצג כאן</p>';
    
    // Assemble refinement UI
    refinementContainer.appendChild(refinementTitle);
    refinementContainer.appendChild(refinementInput);
    refinementContainer.appendChild(refineBtn);
    refinementContainer.appendChild(sessionButtonsContainer);
    refinementContainer.appendChild(conversationLog);
    
    // Insert after the preview iframe
    const previewContainer = document.getElementById('content-preview');
    previewContainer.appendChild(refinementContainer);
}

// --- Event Listeners Setup ---
function setupEventListeners() {
    logoutBtn.addEventListener('click', () => auth.signOut());
    langEnBtn.addEventListener('click', () => setLanguage('en'));
    langHeBtn.addEventListener('click', () => setLanguage('he'));
    getLastLinkBtn.addEventListener('click', getMyLastAppLink);
    galleryViewBtn.addEventListener('click', () => {
        studioContainer.classList.add('hidden');
        galleryContainer.classList.remove('hidden');
        loadGallery();
    });
    backToStudioBtn.addEventListener('click', () => {
        galleryContainer.classList.add('hidden');
        studioContainer.classList.remove('hidden');
    });
    Object.keys(tabs).forEach(tabName => {
        tabs[tabName].addEventListener('click', () => showTab(tabName));
    });
    generateAiBtn.addEventListener('click', generateAiApp);
    publishBtn.addEventListener('click', publishApp);
    
    closeResultsModalBtn.addEventListener('click', () => {
        resultsModal.classList.add('hidden');
        showTab('creator');
        loadGallery();
    });

    closeTextViewerModalBtn.addEventListener('click', () => {
        textViewerModal.classList.add('hidden');
    });
    
    // --- NEW: External Code Paste Modal Event Listeners ---
    pasteExternalCodeBtn.addEventListener('click', () => {
        pasteCodeModal.classList.remove('hidden');
    });

    cancelPasteModalBtn.addEventListener('click', () => {
        pasteCodeModal.classList.add('hidden');
    });

    loadPastedCodeBtn.addEventListener('click', loadPastedCode);
}

function showTab(tabName) {
    Object.values(contents).forEach(content => content.classList.add('hidden'));
    Object.values(tabs).forEach(tab => tab.classList.remove('active'));
    contents[tabName].classList.remove('hidden');
    tabs[tabName].classList.add('active');
    
    // Show/hide refinement UI based on tab
    if (tabName === 'preview' && generatedHtmlContent) {
        refinementContainer.classList.remove('hidden');
    } else {
        refinementContainer.classList.add('hidden');
    }
}

function setLanguage(lang) {
    currentLanguage = lang;
    document.documentElement.lang = lang;
    document.documentElement.dir = lang === 'he' ? 'rtl' : 'ltr';
    document.querySelectorAll('[data-lang]').forEach(element => {
        const key = element.getAttribute('data-lang');
        if (translations[lang] && translations[lang][key]) {
            element.textContent = translations[lang][key];
        }
    });
    
    // Update refinement UI language
    if (refinementInput) {
        refinementInput.placeholder = lang === 'he' 
            ? 'הקלד בקשת שיפור, למשל: "הוסף טיימר של 30 שניות" או "שנה את הצבע לכחול"'
            : 'Type refinement request, e.g.: "Add a 30-second timer" or "Change color to blue"';
    }
    
    renderCards();
    langEnBtn.classList.toggle('bg-blue-100', lang === 'en');
    langHeBtn.classList.toggle('bg-blue-100', lang === 'he');
}

async function loadDynamicContent() {
    try {
        const [personasRes, promptsRes] = await Promise.all([
            fetch('./data/personas.json'),
            fetch('./data/prompts.json')
        ]);
        personasData = (await personasRes.json()).personas;
        promptsData = (await promptsRes.json()).prompts;
        renderCards();
    } catch (error) { console.error("Failed to load dynamic content:", error); }
}

function renderCards() {
    personaLibrary.innerHTML = personasData.map(p => `
        <div class="card-base p-4 bg-white rounded-lg shadow-md text-center cursor-pointer ${selectedPersonaId === p.id ? 'selected' : ''}" data-id="${p.id}">
            <i class="${p.icon} fa-2x text-blue-500 mb-2"></i>
            <h3 class="font-bold">${p.title[currentLanguage]}</h3>
            <p class="text-sm text-gray-600">${p.description[currentLanguage]}</p>
        </div>
    `).join('');
    promptLibrary.innerHTML = promptsData.map(p => `
        <div class="card-base p-4 bg-white rounded-lg shadow-md text-center cursor-pointer ${selectedPromptId === p.id ? 'selected' : ''}" data-id="${p.id}">
            <i class="${p.icon} fa-2x text-green-500 mb-2"></i>
            <h3 class="font-bold">${p.title[currentLanguage]}</h3>
            <p class="text-sm text-gray-600">${p.description[currentLanguage]}</p>
        </div>
    `).join('');
    addCardEventListeners();
}

function addCardEventListeners() {
    personaLibrary.querySelectorAll('.card-base').forEach(card => {
        card.addEventListener('click', (e) => {
            document.querySelectorAll('#persona-library .card-base').forEach(c => c.classList.remove('selected'));
            e.currentTarget.classList.add('selected');
            selectedPersonaId = e.currentTarget.dataset.id;
        });
    });
    promptLibrary.querySelectorAll('.card-base').forEach(card => {
        card.addEventListener('click', (e) => {
            document.querySelectorAll('#prompt-library .card-base').forEach(c => c.classList.remove('selected'));
            e.currentTarget.classList.add('selected');
            selectedPromptId = e.currentTarget.dataset.id;
            const selectedPrompt = promptsData.find(p => p.id === selectedPromptId);
            if (selectedPrompt) { aiPromptInput.value = selectedPrompt.base_prompt[currentLanguage]; }
        });
    });
}

// --- NEW: Conversation Management Functions ---
function addToConversationLog(type, message, timestamp = Date.now()) {
    conversationHistory.push({ type, message, timestamp });
    updateConversationDisplay();
}

function updateConversationDisplay() {
    if (conversationHistory.length === 0) {
        conversationLog.innerHTML = '<p class="text-gray-500 text-sm">היסטוריית השיח תוצג כאן</p>';
        return;
    }
    
    conversationLog.innerHTML = conversationHistory.map((entry, index) => `
        <div class="mb-2 pb-2 ${index < conversationHistory.length - 1 ? 'border-b border-gray-100' : ''}">
            <div class="flex items-center gap-2 mb-1">
                <i class="fas ${entry.type === 'user' ? 'fa-user text-blue-600' : 'fa-robot text-green-600'} text-sm"></i>
                <span class="text-xs text-gray-500">${new Date(entry.timestamp).toLocaleTimeString()}</span>
            </div>
            <p class="text-sm ${entry.type === 'user' ? 'text-blue-800' : 'text-green-800'}">${entry.message}</p>
        </div>
    `).join('');
    
    // Scroll to bottom
    conversationLog.scrollTop = conversationLog.scrollHeight;
}

async function generateAiApp() {
    if (!selectedPersonaId || !selectedPromptId || !aiPromptInput.value.trim()) {
        alert("אנא בחר סגנון AI, סוג פעילות, ומלא את תיאור היישומון.");
        return;
    }
    
    const persona = personasData.find(p => p.id === selectedPersonaId);
    const promptTemplate = promptsData.find(p => p.id === selectedPromptId);
    
    const promptData = {
        persona: persona.system_prompt[currentLanguage],
        template: promptTemplate.base_prompt[currentLanguage], 
        content: aiPromptInput.value.trim()
    };
    
    // --- שינוי מתחיל כאן ---
    const loadingMessage = document.querySelector('#loading-spinner p');
    loadingSpinner.classList.remove('hidden');
    generateAiBtn.disabled = true;

    try {
        loadingMessage.textContent = 'יוצר קשר עם ה-AI...';
        const askVibeAI = functions.httpsCallable('askVibeAI');

        loadingMessage.textContent = 'ה-AI בונה את היישומון שלך (זה לוקח מספר שניות)...';
        const result = await askVibeAI({ 
            prompt: promptData, 
            language: currentLanguage === 'he' ? 'he' : 'en'
        });

        loadingMessage.textContent = 'מקבל את הנתונים ומסיים את ההכנות...';
        // --- סוף השינוי ---
        
        if (!result.data.success || !result.data.content) {
             throw new Error("Invalid response structure from AI function.");
        }
        
        const { htmlCode, metadata } = result.data.content;
        document.getElementById('app-name').value = metadata.appName || '';
        document.getElementById('grade-level').value = metadata.gradeLevel || '';
        document.getElementById('domain-input').value = metadata.domain || '';
        document.getElementById('sub-domain-input').value = metadata.subDomain || '';
        document.getElementById('pedagogy').value = metadata.pedagogicalExplanation || '';
        generatedHtmlContent = htmlCode || ''; 
        previewIframe.srcdoc = generatedHtmlContent;
        
        // Reset conversation for new generation
        conversationHistory = [];
        generationCount = 1;
        currentSessionId = null; // New session
        originalPromptData = promptData; // Store original prompt for saving
        addToConversationLog('user', aiPromptInput.value.trim());
        addToConversationLog('ai', `יצרתי ${metadata.appName || 'יישומון חדש'} בהצלחה!`);
        
        showTab('preview');
    } catch (error) {
        console.error("Error calling AI function:", error);
        alert(`Error generating app: ${error.message}`);
    } finally {
        loadingSpinner.classList.add('hidden');
        generateAiBtn.disabled = false;
        // שחזור ההודעה המקורית לפעם הבאה
        loadingMessage.textContent = translations[currentLanguage].loading_ai;
    }
}

// --- NEW: App Refinement Function ---
async function refineApp() {
    const refinementRequest = refinementInput.value.trim();
    if (!refinementRequest || !generatedHtmlContent) {
        alert("אנא הכנס בקשת שיפור ווודא שיש יישומון קיים לשיפור.");
        return;
    }
    
    // Update UI state
    refineBtn.disabled = true;
    const originalBtnText = refineBtn.querySelector('span').textContent;
    refineBtn.querySelector('span').textContent = translations[currentLanguage].loading_refine;
    
    // Add user message to conversation
    addToConversationLog('user', refinementRequest);
    
    try {
        // Use the simplified askVibeAI with currentApp parameter
        const askVibeAI = functions.httpsCallable('askVibeAI');
        
        const currentAppData = {
            htmlCode: generatedHtmlContent,
            metadata: {
                appName: document.getElementById('app-name').value,
                gradeLevel: document.getElementById('grade-level').value,
                domain: document.getElementById('domain-input').value,
                subDomain: document.getElementById('sub-domain-input').value,
                pedagogicalExplanation: document.getElementById('pedagogy').value
            }
        };
        
        const result = await askVibeAI({
            prompt: { content: refinementRequest },
            currentApp: currentAppData,
            language: currentLanguage === 'he' ? 'he' : 'en'
        });
        
        if (!result.data.success || !result.data.content) {
            throw new Error("Invalid refinement response from AI function.");
        }
        
        const { htmlCode, metadata } = result.data.content;
        
        // Update the app
        generatedHtmlContent = htmlCode;
        previewIframe.srcdoc = generatedHtmlContent;
        
        // Update metadata if provided
        if (metadata) {
            if (metadata.appName) document.getElementById('app-name').value = metadata.appName;
            if (metadata.gradeLevel) document.getElementById('grade-level').value = metadata.gradeLevel;
            if (metadata.domain) document.getElementById('domain-input').value = metadata.domain;
            if (metadata.subDomain) document.getElementById('sub-domain-input').value = metadata.subDomain;
            if (metadata.pedagogicalExplanation) document.getElementById('pedagogy').value = metadata.pedagogicalExplanation;
        }
        
        // Add AI response to conversation
        const aiMessage = 'השיפור בוצע בהצלחה!';
        addToConversationLog('ai', aiMessage);
        
        // Clear refinement input
        refinementInput.value = '';
        generationCount++;
        
        console.log(`✅ App refined successfully (generation ${generationCount})`);
        
    } catch (error) {
        console.error("Error refining app:", error);
        alert(`שגיאה בשיפור היישומון: ${error.message}`);
        addToConversationLog('ai', `שגיאה: ${error.message}`);
    } finally {
        refineBtn.disabled = false;
        refineBtn.querySelector('span').textContent = originalBtnText;
    }
}

async function publishApp() {
    const appData = {
        appName: document.getElementById('app-name').value.trim(),
        gradeLevel: document.getElementById('grade-level').value.trim(),
        domain: document.getElementById('domain-input').value.trim(),
        subDomain: document.getElementById('sub-domain-input').value.trim(),
        pedagogy: document.getElementById('pedagogy').value.trim(),
        htmlContent: generatedHtmlContent,
        conversationLog: conversationHistory, // NEW: Include conversation history
        generationCount: generationCount // NEW: Include generation count
    };
    if (!appData.appName || !generatedHtmlContent) {
        alert('App Name and generated content are required.');
        return;
    }
    const originalBtnSpan = publishBtn.querySelector('span');
    const originalBtnText = originalBtnSpan ? originalBtnSpan.textContent : 'פרסם לגלריה';
    publishBtn.disabled = true;
    if (originalBtnSpan) originalBtnSpan.textContent = '...';
    try {
        const publishHtml = functions.httpsCallable('publishHtml');
        const result = await publishHtml(appData);
        if (result.data.success) {
            resultShortUrl.value = result.data.shortUrl;
            resultQrCode.src = result.data.qrCodeDataUrl || '';
            resultQrCode.classList.toggle('hidden', !result.data.qrCodeDataUrl);
            resultsModal.classList.remove('hidden');
        } else {
            throw new Error(result.data.error || 'Unknown publishing error.');
        }
    } catch (error) {
        console.error("Error publishing:", error);
        alert(`Failed to publish: ${error.message}`);
    } finally {
        publishBtn.disabled = false;
        if (originalBtnSpan) originalBtnSpan.textContent = originalBtnText;
    }
}

async function getMyLastAppLink() {
    if (!auth.currentUser) { alert("You must be logged in."); return; }
    try {
        const querySnapshot = await firestore.collection("community_apps")
            .where("teacher_uid", "==", auth.currentUser.uid)
            .orderBy("createdAt", "desc").limit(1).get();
        if (querySnapshot.empty) { alert("לא נמצאו יישומונים שפרסמת."); return; }
        const lastApp = querySnapshot.docs[0].data();
        resultShortUrl.value = lastApp.shortUrl || lastApp.app_url;
        if (lastApp.qrCodeDataUrl) {
            resultQrCode.src = lastApp.qrCodeDataUrl;
            resultQrCode.classList.remove('hidden');
        } else {
             resultQrCode.classList.add('hidden');
        }
        resultsModal.classList.remove('hidden');
    } catch (error) {
        console.error("Error getting last link:", error);
        alert("שגיאה בשליפת הקישור האחרון.");
    }
}

// --- Helper functions for the gallery ---
function truncateText(text = '', maxLength) {
    if (text.length <= maxLength) return text;
    return text.substr(0, maxLength - 3) + '...';
}

function showFullText(title, content) {
    textViewerTitle.textContent = title;
    textViewerContent.textContent = content;
    textViewerModal.classList.remove('hidden');
}

// --- Gallery Logic ---
async function loadGallery() {
    const galleryTableBody = document.getElementById('gallery-table-body');
    galleryTableBody.innerHTML = `<tr><td colspan="5" class="text-center p-8">טוען...</td></tr>`;

    try {
        const querySnapshot = await firestore.collection("community_apps").orderBy("createdAt", "desc").get();
        if (querySnapshot.empty) {
            galleryTableBody.innerHTML = `<tr><td colspan="5" class="text-center p-8">הגלריה ריקה.</td></tr>`;
            return;
        }

        galleryTableBody.innerHTML = querySnapshot.docs.map(doc => {
            const app = doc.data();
            const pedagogy = app.pedagogicalExplanation || '';
            const truncatedPedagogy = truncateText(pedagogy, 30);
            const generationInfo = app.generationCount ? ` (${app.generationCount} גרסאות)` : '';

            return `
                <tr>
                    <td class="px-6 py-4 whitespace-nowrap font-medium text-gray-900">${app.appName || ''}${generationInfo}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-gray-500">${app.teacher_name || ''}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-gray-500">${app.schoolCode || ''}</td>
                    <td class="px-6 py-4 text-gray-500">
                        <span class="cursor-pointer hover:text-blue-600 hover:underline" data-fulltext="${pedagogy}">
                            ${truncatedPedagogy}
                        </span>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-center">
                         <button onclick="navigator.clipboard.writeText('${app.shortUrl || app.app_url}')" class="text-blue-600 hover:text-blue-800" title="העתק קישור">
                            <i class="fas fa-copy"></i>
                         </button>
                    </td>
                </tr>
            `;
        }).join('');

        // Add event listeners for the clickable text spans
        galleryTableBody.querySelectorAll('[data-fulltext]').forEach(span => {
            span.addEventListener('click', (e) => {
                const fullText = e.target.dataset.fulltext;
                showFullText('הסבר פדגוגי מלא', fullText);
            });
        });
    } catch (error) {
        console.error("Error loading gallery:", error);
        galleryTableBody.innerHTML = `<tr><td colspan="5" class="text-center p-8 text-red-500">שגיאה בטעינת הגלריה.</td></tr>`;
    }
}

// --- Work Session Management ---
async function saveCurrentSession() {
    if (!generatedHtmlContent) {
        alert('אין יישומון לשמירה');
        return;
    }
    
    const sessionName = prompt('שם לשמירה:', document.getElementById('app-name').value || 'סשן עבודה');
    if (!sessionName) return;
    
    const currentAppData = {
        htmlCode: generatedHtmlContent,
        metadata: {
            appName: document.getElementById('app-name').value,
            gradeLevel: document.getElementById('grade-level').value,
            domain: document.getElementById('domain-input').value,
            subDomain: document.getElementById('sub-domain-input').value,
            pedagogicalExplanation: document.getElementById('pedagogy').value
        }
    };
    
    try {
        const saveWorkSession = functions.httpsCallable('saveWorkSession');
        const result = await saveWorkSession({
            sessionName: sessionName,
            currentApp: currentAppData,
            originalPrompt: originalPromptData,
            sessionHistory: conversationHistory.map(entry => entry.message)
        });
        
        if (result.data.success) {
            currentSessionId = result.data.sessionId;
            alert('הסשן נשמר בהצלחה!');
        } else {
            throw new Error(result.data.message || 'שגיאה בשמירה');
        }
    } catch (error) {
        console.error('Error saving session:', error);
        alert(`שגיאה בשמירת הסשן: ${error.message}`);
    }
}

async function showLoadSessionModal() {
    try {
        const getUserWorkSessions = functions.httpsCallable('getUserWorkSessions');
        const result = await getUserWorkSessions();
        
        if (!result.data.success || !result.data.sessions.length) {
            alert('לא נמצאו סשנים שמורים');
            return;
        }
        
        const sessions = result.data.sessions;
        const sessionList = sessions.map((session, index) => 
            `${index + 1}. ${session.sessionName} (${session.appName}) - ${new Date(session.lastUpdated?.toDate?.() || session.lastUpdated).toLocaleDateString()}`
        ).join('\n');
        
        const choice = prompt(`בחר סשן לטעינה:\n\n${sessionList}\n\nהקלד מספר:`);
        
        if (choice && !isNaN(choice)) {
            const sessionIndex = parseInt(choice) - 1;
            if (sessionIndex >= 0 && sessionIndex < sessions.length) {
                await loadWorkSession(sessions[sessionIndex].id);
            }
        }
        
    } catch (error) {
        console.error('Error loading sessions list:', error);
        alert(`שגיאה בטעינת רשימת הסשנים: ${error.message}`);
    }
}

async function loadWorkSession(sessionId) {
    try {
        const loadWorkSessionFn = functions.httpsCallable('loadWorkSession');
        const result = await loadWorkSessionFn({ sessionId });
        
        if (!result.data.success) {
            throw new Error(result.data.message || 'שגיאה בטעינה');
        }
        
        const session = result.data.session;
        
        // Restore app content
        generatedHtmlContent = session.currentApp.htmlCode;
        previewIframe.srcdoc = generatedHtmlContent;
        
        // Restore metadata
        if (session.currentApp.metadata) {
            document.getElementById('app-name').value = session.currentApp.metadata.appName || '';
            document.getElementById('grade-level').value = session.currentApp.metadata.gradeLevel || '';
            document.getElementById('domain-input').value = session.currentApp.metadata.domain || '';
            document.getElementById('sub-domain-input').value = session.currentApp.metadata.subDomain || '';
            document.getElementById('pedagogy').value = session.currentApp.metadata.pedagogicalExplanation || '';
        }
        
        // Restore session state
        currentSessionId = sessionId;
        originalPromptData = session.originalPrompt;
        
        // Restore conversation history
        conversationHistory = [];
        if (session.sessionHistory && Array.isArray(session.sessionHistory)) {
            session.sessionHistory.forEach((message, index) => {
                const type = index % 2 === 0 ? 'user' : 'ai';
                conversationHistory.push({
                    type: type,
                    message: message,
                    timestamp: Date.now() - (session.sessionHistory.length - index) * 60000 // Mock timestamps
                });
            });
        }
        updateConversationDisplay();
        
        // Show preview tab
        showTab('preview');
        
        alert(`הסשן "${session.sessionName}" נטען בהצלחה!`);
        
    } catch (error) {
        console.error('Error loading work session:', error);
        alert(`שגיאה בטעינת הסשן: ${error.message}`);
    }
}

// --- NEW: Function to load pasted external code ---
function loadPastedCode() {
    const pastedHtml = externalCodeTextarea.value.trim();
    if (!pastedHtml) {
        alert('תיבת הטקסט ריקה. אנא הדבק קוד HTML.');
        return;
    }

    // הגדרת התוכן הגלובלי והצגתו בתצוגה המקדימה
    generatedHtmlContent = pastedHtml;
    previewIframe.srcdoc = generatedHtmlContent;

    // איפוס שדות המטא-דאטה (כדי שהמשתמש ימלא אותם ידנית)
    document.getElementById('app-name').value = '';
    document.getElementById('grade-level').value = '';
    document.getElementById('domain-input').value = '';
    document.getElementById('sub-domain-input').value = '';
    document.getElementById('pedagogy').value = 'התוכן הוזן ידנית ממקור חיצוני.';

    // איפוס היסטוריית השיחה
    conversationHistory = [];
    updateConversationDisplay();

    // סגירת החלון והעברה לטאב תצוגה מקדימה
    pasteCodeModal.classList.add('hidden');
    showTab('preview');

    alert('הקוד נטען בהצלחה! באפשרותך למלא את הפרטים ולפרסם, או לבקש שיפורים מה-AI שלנו.');
}



========================================================================================================================
FILE: C:\Users\Meir Livneh\Documents\fireclassStudio\public\data\personas.json
TYPE: .json
SIZE: 2633 characters
FOLDER: public
========================================================================================================================

{
  "personas": [
    {
      "id": "socratic_teacher",
      "icon": "fas fa-comments",
      "title": {
        "en": "Socratic Teacher",
        "he": "המורה הסוקרטי"
      },
      "description": {
        "en": "Asks guiding questions.",
        "he": "שואל שאלות מנחות."
      },
      "system_prompt": {
        "en": "You are a Socratic teacher. Your goal is to create an applet that encourages students to discover answers on their own through inquiry. The applet should ask guiding questions rather than providing direct information.",
        "he": "אתה מורה סוקרטי. מטרתך היא ליצור יישומון שמעודד תלמידים לגלות תשובות בעצמם באמצעות חקירה. היישומון צריך לשאול שאלות מנחות במקום לספק מידע ישיר."
      }
    },
    {
      "id": "coach",
      "icon": "fas fa-whistle",
      "title": {
        "en": "The Coach",
        "he": "המאמן"
      },
      "description": {
        "en": "Provides gradual hints.",
        "he": "נותן רמזים מדורגים."
      },
      "system_prompt": {
        "en": "You are a supportive coach. Your goal is to create an applet that provides gradual hints and encouragement. It should break down problems into smaller steps and offer positive feedback.",
        "he": "אתה מאמן תומך. מטרתך היא ליצור יישומון שמספק רמזים מדורגים ועידוד. עליו לפרק בעיות לשלבים קטנים ולהציע משוב חיובי."
      }
    },
    {
      "id": "demonstrator",
      "icon": "fas fa-chalkboard-teacher",
      "title": {
        "en": "The Demonstrator",
        "he": "המדגים"
      },
      "description": {
        "en": "Presents a step-by-step solution.",
        "he": "מציג פתרון שלב-אחר-שלב."
      },
      "system_prompt": {
        "en": "You are a demonstrator. Your goal is to create an applet that clearly demonstrates a concept or a solution step-by-step, using visual aids and clear explanations.",
        "he": "אתה מדגים. מטרתך היא ליצור יישומון שמדגים בבירור מושג או פתרון, שלב אחר שלב, תוך שימוש בעזרים ויזואליים והסברים ברורים."
      }
    },
    {
      "id": "storyteller",
      "icon": "fas fa-book",
      "title": {
        "en": "The Storyteller",
        "he": "המספר"
      },
      "description": {
        "en": "Teaches through a narrative.",
        "he": "מלמד דרך סיפור."
      },
      "system_prompt": {
        "en": "You are a storyteller. Your goal is to create an applet that teaches a concept through an engaging story, narrative, or historical context. The learning should be embedded within the story.",
        "he": "אתה מספר סיפורים. מטרתך היא ליצור יישומון המלמד מושג באמצעות סיפור מרתק, נרטיב או הקשר היסטורי. הלמידה צריכה להיות שזורה בתוך הסיפור."
      }
    }
  ]
}




========================================================================================================================
FILE: C:\Users\Meir Livneh\Documents\fireclassStudio\public\data\prompts.json
TYPE: .json
SIZE: 2747 characters
FOLDER: public
========================================================================================================================

{
  "prompts": [
    {
      "id": "quiz",
      "icon": "fas fa-question-circle",
      "title": {
        "en": "Quiz / Test",
        "he": "חידון / מבחן"
      },
      "description": {
        "en": "A series of questions with multiple-choice or text answers.",
        "he": "סדרה של שאלות עם תשובות רב-ברירתיות או טקסט פתוח."
      },
      "base_prompt": {
        "en": "Create a quiz for [GRADE LEVEL] about [SUBJECT]. The quiz should have [NUMBER] multiple-choice questions. The topic is [TOPIC].",
        "he": "צור חידון עבור [שכבת גיל] בנושא [מקצוע]. החידון צריך לכלול [מספר] שאלות רב-ברירתיות. הנושא הוא [נושא]."
      }
    },
    {
      "id": "drag-and-drop",
      "icon": "fas fa-hand-paper",
      "title": {
        "en": "Drag & Drop Game",
        "he": "משחק גרירה והתאמה"
      },
      "description": {
        "en": "A matching game where users drag items to their correct targets.",
        "he": "משחק התאמה בו גוררים פריטים למטרות הנכונות שלהם."
      },
      "base_prompt": {
        "en": "Create a drag and drop matching game. The items to drag are [ITEM 1, ITEM 2, ITEM 3] and the targets are [TARGET 1, TARGET 2, TARGET 3]. The theme is [THEME].",
        "he": "צור משחק התאמה של גרירה ושחרור. הפריטים לגרירה הם [פריט 1, פריט 2, פריט 3] והמטרות הן [מטרה 1, מטרה 2, מטרה 3]. הנושא הוא [נושא]."
      }
    },
    {
      "id": "story",
      "icon": "fas fa-book-open",
      "title": {
        "en": "Interactive Story",
        "he": "סיפור אינטראקטיבי"
      },
      "description": {
        "en": "A story where the user makes choices that change the outcome.",
        "he": "סיפור בו המשתמש מבצע בחירות שמשפיעות על התוצאה."
      },
      "base_prompt": {
        "en": "Create a short interactive story for [AGE GROUP] about [STORY SUBJECT]. The story should have at least two decision points for the reader.",
        "he": "צור סיפור אינטראקטיבי קצר עבור [קבוצת גיל] על [נושא הסיפור]. הסיפור צריך להכיל לפחות שתי נקודות החלטה עבור הקורא."
      }
    },
    {
      "id": "simulation",
      "icon": "fas fa-flask",
      "title": {
        "en": "Simple Simulation",
        "he": "סימולציה פשוטה"
      },
      "description": {
        "en": "A basic simulation of a process with interactive controls.",
        "he": "הדמיה בסיסית של תהליך עם בקרים אינטראקטיביים."
      },
      "base_prompt": {
        "en": "Create a simple simulation of [PROCESS, e.g., plant growth]. The user should be able to control [CONTROL 1, e.g., amount of water] and [CONTROL 2, e.g., amount of sunlight] and see the result.",
        "he": "צור סימולציה פשוטה של [תהליך, למשל: צמיחת צמח]. המשתמש צריך להיות מסוגל לשלוט ב[בקר 1, למשל: כמות המים] וב[בקר 2, למשל: כמות אור השמש] ולראות את התוצאה."
      }
    }
  ]
}


========================================================================================================================
FILE: C:\Users\Meir Livneh\Documents\fireclassStudio\public\locales\ar\common.json
TYPE: .json
SIZE: 88 characters
FOLDER: public
========================================================================================================================

{
  "loading": "[ar] Loading...",
  "error": "[ar] Error",
  "success": "[ar] Success"
}


========================================================================================================================
FILE: C:\Users\Meir Livneh\Documents\fireclassStudio\public\locales\ar\student.json
TYPE: .json
SIZE: 92 characters
FOLDER: public
========================================================================================================================

{
  "join": "[ar] Join Lesson",
  "name": "[ar] Your name",
  "roomCode": "[ar] Room Code"
}


========================================================================================================================
FILE: C:\Users\Meir Livneh\Documents\fireclassStudio\public\locales\ar\teacher.json
TYPE: .json
SIZE: 105 characters
FOLDER: public
========================================================================================================================

{
  "dashboard": "[ar] Teacher Dashboard",
  "students": "[ar] Students",
  "messages": "[ar] Messages"
}


========================================================================================================================
FILE: C:\Users\Meir Livneh\Documents\fireclassStudio\public\locales\en\common.json
TYPE: .json
SIZE: 73 characters
FOLDER: public
========================================================================================================================

{
  "loading": "Loading...",
  "error": "Error",
  "success": "Success"
}


========================================================================================================================
FILE: C:\Users\Meir Livneh\Documents\fireclassStudio\public\locales\en\student.json
TYPE: .json
SIZE: 77 characters
FOLDER: public
========================================================================================================================

{
  "join": "Join Lesson",
  "name": "Your name",
  "roomCode": "Room Code"
}


========================================================================================================================
FILE: C:\Users\Meir Livneh\Documents\fireclassStudio\public\locales\en\teacher.json
TYPE: .json
SIZE: 90 characters
FOLDER: public
========================================================================================================================

{
  "dashboard": "Teacher Dashboard",
  "students": "Students",
  "messages": "Messages"
}


========================================================================================================================
FILE: C:\Users\Meir Livneh\Documents\fireclassStudio\public\locales\es\common.json
TYPE: .json
SIZE: 88 characters
FOLDER: public
========================================================================================================================

{
  "loading": "[es] Loading...",
  "error": "[es] Error",
  "success": "[es] Success"
}


========================================================================================================================
FILE: C:\Users\Meir Livneh\Documents\fireclassStudio\public\locales\es\student.json
TYPE: .json
SIZE: 92 characters
FOLDER: public
========================================================================================================================

{
  "join": "[es] Join Lesson",
  "name": "[es] Your name",
  "roomCode": "[es] Room Code"
}


========================================================================================================================
FILE: C:\Users\Meir Livneh\Documents\fireclassStudio\public\locales\es\teacher.json
TYPE: .json
SIZE: 105 characters
FOLDER: public
========================================================================================================================

{
  "dashboard": "[es] Teacher Dashboard",
  "students": "[es] Students",
  "messages": "[es] Messages"
}


========================================================================================================================
FILE: C:\Users\Meir Livneh\Documents\fireclassStudio\public\locales\fr\common.json
TYPE: .json
SIZE: 88 characters
FOLDER: public
========================================================================================================================

{
  "loading": "[fr] Loading...",
  "error": "[fr] Error",
  "success": "[fr] Success"
}


========================================================================================================================
FILE: C:\Users\Meir Livneh\Documents\fireclassStudio\public\locales\fr\student.json
TYPE: .json
SIZE: 92 characters
FOLDER: public
========================================================================================================================

{
  "join": "[fr] Join Lesson",
  "name": "[fr] Your name",
  "roomCode": "[fr] Room Code"
}


========================================================================================================================
FILE: C:\Users\Meir Livneh\Documents\fireclassStudio\public\locales\fr\teacher.json
TYPE: .json
SIZE: 105 characters
FOLDER: public
========================================================================================================================

{
  "dashboard": "[fr] Teacher Dashboard",
  "students": "[fr] Students",
  "messages": "[fr] Messages"
}


========================================================================================================================
FILE: C:\Users\Meir Livneh\Documents\fireclassStudio\public\locales\he\common.json
TYPE: .json
SIZE: 88 characters
FOLDER: public
========================================================================================================================

{
  "loading": "[he] Loading...",
  "error": "[he] Error",
  "success": "[he] Success"
}


========================================================================================================================
FILE: C:\Users\Meir Livneh\Documents\fireclassStudio\public\locales\he\student.json
TYPE: .json
SIZE: 92 characters
FOLDER: public
========================================================================================================================

{
  "join": "[he] Join Lesson",
  "name": "[he] Your name",
  "roomCode": "[he] Room Code"
}


========================================================================================================================
FILE: C:\Users\Meir Livneh\Documents\fireclassStudio\public\locales\he\teacher.json
TYPE: .json
SIZE: 105 characters
FOLDER: public
========================================================================================================================

{
  "dashboard": "[he] Teacher Dashboard",
  "students": "[he] Students",
  "messages": "[he] Messages"
}


========================================================================================================================
FILE: C:\Users\Meir Livneh\Documents\fireclassStudio\public\prompts.json
TYPE: .json
SIZE: 2748 characters
FOLDER: public
========================================================================================================================

{
  "prompts": [
    {
      "id": "quiz",
      "icon": "fas fa-question-circle",
      "title": {
        "en": "Quiz / Test",
        "he": "חידון / מבחן"
      },
      "description": {
        "en": "A series of questions with multiple-choice or text answers.",
        "he": "סדרה של שאלות עם תשובות רב-ברירתיות או טקסט פתוח."
      },
      "base_prompt": {
        "en": "Create a quiz for [GRADE LEVEL] about [SUBJECT]. The quiz should have [NUMBER] multiple-choice questions. The topic is [TOPIC].",
        "he": "צור חידון עבור [שכבת גיל] בנושא [מקצוע]. החידון צריך לכלול [מספר] שאלות רב-ברירתיות. הנושא הוא [נושא]."
      }
    },
    {
      "id": "drag-and-drop",
      "icon": "fas fa-hand-paper",
      "title": {
        "en": "Drag & Drop Game",
        "he": "משחק גרירה והתאמה"
      },
      "description": {
        "en": "A matching game where users drag items to their correct targets.",
        "he": "משחק התאמה בו גוררים פריטים למטרות הנכונות שלהם."
      },
      "base_prompt": {
        "en": "Create a drag and drop matching game. The items to drag are [ITEM 1, ITEM 2, ITEM 3] and the targets are [TARGET 1, TARGET 2, TARGET 3]. The theme is [THEME].",
        "he": "צור משחק התאמה של גרירה ושחרור. הפריטים לגרירה הם [פריט 1, פריט 2, פריט 3] והמטרות הן [מטרה 1, מטרה 2, מטרה 3]. הנושא הוא [נושא]."
      }
    },
    {
      "id": "story",
      "icon": "fas fa-book-open",
      "title": {
        "en": "Interactive Story",
        "he": "סיפור אינטראקטיבי"
      },
      "description": {
        "en": "A story where the user makes choices that change the outcome.",
        "he": "סיפור בו המשתמש מבצע בחירות שמשפיעות על התוצאה."
      },
      "base_prompt": {
        "en": "Create a short interactive story for [AGE GROUP] about [STORY SUBJECT]. The story should have at least two decision points for the reader.",
        "he": "צור סיפור אינטראקטיבי קצר עבור [קבוצת גיל] על [נושא הסיפור]. הסיפור צריך להכיל לפחות שתי נקודות החלטה עבור הקורא."
      }
    },
    {
      "id": "simulation",
      "icon": "fas fa-flask",
      "title": {
        "en": "Simple Simulation",
        "he": "סימולציה פשוטה"
      },
      "description": {
        "en": "A basic simulation of a process with interactive controls.",
        "he": "הדמיה בסיסית של תהליך עם בקרים אינטראקטיביים."
      },
      "base_prompt": {
        "en": "Create a simple simulation of [PROCESS, e.g., plant growth]. The user should be able to control [CONTROL 1, e.g., amount of water] and [CONTROL 2, e.g., amount of sunlight] and see the result.",
        "he": "צור סימולציה פשוטה של [תהליך, למשל: צמיחת צמח]. המשתמש צריך להיות מסוגל לשלוט ב[בקר 1, למשל: כמות המים] וב[בקר 2, למשל: כמות אור השמש] ולראות את התוצאה."
      }
    }
  ]
}



========================================================================================================================
FILE: C:\Users\Meir Livneh\Documents\fireclassStudio\docs\install_guide.md
TYPE: .md
SIZE: 10988 characters
FOLDER: docs
========================================================================================================================

# מדריך התקנה והגדרה: פרויקט Vibe Studio

**גרסה: 2.0 - עם מנגנון FireClass Integration החדש**

מסמך זה מכיל את כל השלבים הנדרשים להקמה מלאה של פרויקט Vibe Studio, כולל האינטגרציה החדשה עם FireClass באמצעות Service Account. **עודכן עם המנגנון החדש והבטוח יותר.**

## שלב 1: הגדרת סביבת הענן ב-Firebase

1.  **צור פרויקט חדש** במסוף Firebase (למשל, `fireclassstudio`).
2.  **שדרג את תוכנית החיוב** ל-**Blaze (Pay as you go)**. זה הכרחי להפעלת פונקציות ענן.
3.  **הפעל שירותים:**
    * **Authentication**:
        * עבור ללשונית **Sign-in method**.
        * לחץ על **Email/Password** והפעל את **שני** המתגים: `Email/Password` ו-`Email link (passwordless sign-in)`.
    * **Firestore Database**:
        * צור מסד נתונים חדש במצב **Test mode** ובמיקום הרצוי (למשל, `us-central1`).
    * **Storage**:
        * הפעל את שירות האחסון עם הגדרות ברירת המחדל.
        * **חשוב:** שירות זה יקבל את השם `fireclassstudio.firebasestorage.app` (לא `appspot.com`).
4.  **רשום אפליקציית Web**:
    * לחץ על סמל האינטרנט (`</>`).
    * תן כינוי לאפליקציה (למשל, "Vibe Studio Web").
    * **אל תסמן** את התיבה `Firebase Hosting`.
    * בסיום, העתק את אובייקט ה-`firebaseConfig` המלא ושמור אותו בצד.
5.  **אשר דומיינים (שלב קריטי)**:
    * בלשונית **Authentication -> Settings -> Authorized domains**, לחץ על **Add domain**.
    * הוסף את הדומיינים הבאים, אחד אחרי השני:
        * `localhost`
        * `127.0.0.1`

---

## שלב 2: הגדרת FireClass Service Account (חדש!)

**שלב זה הכרחי למנגנון החדש - גישה ישירה לפיירסטור של FireClass:**

1.  **היכנס לפרויקט FireClass** במסוף Firebase (לא הסטודיו!).
2.  **לך ל-Project Settings** (הגלגל שיניים) → **Service accounts**.
3.  **לחץ על "Generate new private key"**.
4.  **בחר את החשבון:** `firebase-adminsdk-xxxxx@fireclass.iam.gserviceaccount.com`.
5.  **הורד את קובץ ה-JSON** - זהו ה-Service Account שלך.
6.  **שמור את הקובץ** במקום בטוח (אל תעלה אותו לגיט!).

---

## שלב 3: הגדרת Secrets ב-Vibe Studio

1.  **היכנס לפרויקט Vibe Studio** במסוף Firebase.
2.  **לך ל-Functions → Secrets** (אם לא רואה, השתמש ב-CLI).
3.  **הגדר את הסודות הבאים:**

    ```bash
    # הגדר את Service Account של FireClass
    firebase functions:secrets:set FIRECLASS_SERVICE_ACCOUNT
    
    # הגדר את שאר הסודות
    firebase functions:secrets:set GEMINI_API_KEY
    firebase functions:secrets:set BITLY_ACCESS_TOKEN
    ```

4.  **עבור FIRECLASS_SERVICE_ACCOUNT:**
    - פתח את קובץ ה-JSON שהורדת בשלב 2
    - העתק את **כל התוכן** (כולל הסוגריים המסולסלות)
    - הדבק אותו כערך של הסוד

---

## שלב 4: הקמת הפרויקט המקומי

1.  **צור תיקייה חדשה וריקה** במחשב שלך (למשל, `fireclassStudio`).
2.  **פתח טרמינל בתוך התיקייה החדשה** והרץ `firebase init`.
3.  **ענה על השאלות** בתהליך ה-`init` בדיוק לפי הסדר:
    * **Features**: בחר (עם מקש הרווח) את **Firestore**, **Functions**, ו-**Storage**.
    * **Project**: בחר `Use an existing project` ואתר את הפרויקט שיצרת.
    * **Rules files**: לחץ **Enter** בשתי השאלות כדי לקבל את שמות ברירת המחדל.
    * **Language**: בחר **JavaScript**.
    * **ESLint**: בחר **Yes**.
    * **Overwrite package.json?**: הקלד **y** ולחץ Enter.
    * **Install dependencies now?**: בחר **Yes**.
4.  **צור תיקיות בצד הלקוח:** בתוך תיקיית `public`, צור שתי תיקיות: **`css`** ו-**`js`**.

---

## שלב 5: הוספת קוד המקור

1.  **צור את קבצי המקור** (`public/index.html`, `public/css/style.css`, `public/js/studio.js`, ו-`functions/index.js`) והדבק בהם את הקוד המלא מהשיחה שלנו.
2.  **הוסף את פרטי התצורה:** פתח את הקובץ `public/js/firebase-config.js` והדבק בו את אובייקט ה-`firebaseConfig` ששמרת בשלב 1.

---

## שלב 6: התקנת תלויות וקונפיגורציה

1.  **התקן תלויות בשרת**:
    * בטרמינל, נווט לתיקיית `functions` (`cd functions`).
    * הרץ את הפקודה: `npm install bitly qrcode`.
2.  **הגדר את ESLint**:
    * פתח את הקובץ `functions/.eslintrc.js`.
    * בתוך האובייקט `rules`, הוסף את השורות הבאות:
        ```javascript
        "require-jsdoc": "off",
        "max-len": "off",
        ```
    * חזור לתיקייה הראשית (`cd ..`).

---

## שלב 7: פריסה ובדיקה

1.  **פרוס את קוד השרת לענן**:
    ```bash
    firebase deploy --only functions
    ```
2.  **הרץ את האפליקציה מקומית**:
    * התקן `live-server` (אם לא מותקן): `npm install -g live-server`.
    * נווט לתיקיית `public` (`cd public`).
    * הרץ את הפקודה: `live-server`.

---

## שלב 8: הגדרות לסביבת ייצור (Production)

**חשוב:** כאשר תפרוס את האתר לסביבת הייצור שלך ב-Azure, תצטרך לבצע את הפעולה הבאה כדי שההתחברות תעבוד:

1.  לאחר הפריסה, Azure יספק לך כתובת ברירת מחדל לאתר (לדוגמה: `something.azurestaticapps.net`).
2.  לך למסוף Firebase של פרויקט **`fireclassstudio`**.
3.  עבור אל **Authentication -> Settings -> Authorized domains**.
4.  לחץ **Add domain** והוסף את **הכתובת המלאה שקיבלת מ-Azure**.
5.  אם חיברת דומיין אישי (כמו `studio.fireclass.online`), הוסף גם אותו לרשימה.

פעולה זו הכרחית כדי לאשר ל-Firebase לקבל בקשות התחברות מהאתר החי שלך.

---

## שלב 9: מנגנון Download Tokens - הפתרון הסופי

**עדכון חשוב:** לאחר ניסיונות רבים עם מנגנונים שונים, המערכת עברה לשימוש ב-**Download Tokens** של Firebase Storage. זהו הפתרון היציב והבטוח ביותר.

### מה זה Download Tokens?

Download Tokens הם מנגנון של Firebase Storage שמאפשר גישה לקבצים ללא צורך בהרשאות IAM מורכבות:

- **איך זה עובד:** כל קובץ מקבל UUID ייחודי שנשמר במטא-דאטה שלו.
- **URL גישה:** נבנה בפורמט: `https://firebasestorage.googleapis.com/v0/b/<bucket>/o/<path>?alt=media&token=<uuid>`.
- **יתרונות:** עוקף בעיות הרשאות, עובד מיידית, ומספק גישה בטוחה.

### יישום ב-Code

המערכת מיישמת Download Tokens ב-3 מקומות:

1. **`publishHtml`:** יוצר token לכל קובץ HTML.
2. **`publishZip`:** יוצר token ל-index.html בתוך ה-ZIP.
3. **`downloadCode`:** מפענח URLs עם tokens להורדת קבצים.

### למה זה עובד?

- **ללא IAM:** לא צריך להגדיר הרשאות מורכבות לחשבון השירות.
- **ללא ACL ציבורי:** הקבצים נשארים פרטיים עם גישה מוגבלת.
- **תאימות מלאה:** עובד עם כל הגרסאות של Firebase Storage.

---

## שלב 10: מנגנון אימות המורה החדש (FireClass Integration)

**המנגנון החדש והבטוח יותר:**

### איך זה עובד:

1. **אפליקציה כפולה:** סטודיו יוצר שתי אפליקציות Firebase Admin:
   - **אפליקציה ראשית:** לגישה לפיירסטור של סטודיו
   - **אפליקציה שנייה:** לגישה לפיירסטור של קלאס

2. **Service Account:** משתמש ב-`FIRECLASS_SERVICE_ACCOUNT` לגישה ישירה לפיירסטור של קלאס

3. **בדיקה ישירה:** שואל ישירות ב-`teachers` collection עם `profile.email`

### יתרונות המנגנון החדש:

- **מהיר יותר:** גישה ישירה לפיירסטור
- **יציב יותר:** לא תלוי ב-API חיצוני
- **בטוח יותר:** הרשאות מוגדרות היטב
- **פשוט יותר:** פחות נקודות כשל

### בדיקת המנגנון:

לאחר פריסה, תראה בלוגים:
```
🔍 [DB-VERIFY] Starting teacher verification for: teacher@example.com
🎯 [DB-VERIFY] Verification result for teacher@example.com: Found
```

---

## שלב 11 (פתרון תקלות): היסטוריה מלאה של השגיאות והפתרונות

### 11.1. שגיאת HttpsError (500 Internal Server Error)

**הבעיה:** שימוש לא נכון בסינטקס של Firebase Functions v2.

**הסימפטומים:**
- שגיאה 500 בכל הפונקציות
- הודעות שגיאה לא ברורות בצד הלקוח

**הפתרון:**
```javascript
// לפני (שגוי):
const {onCall} = require("firebase-functions/v2/https");
throw new onCall.HttpsError("unauthenticated", "Auth required.");

// אחרי (נכון):
const {onCall, HttpsError} = require("firebase-functions/v2/https");
throw new HttpsError("unauthenticated", "Auth required.");
```

### 11.2. בעיות Service Account

**הבעיה:** שגיאות בעת ניסיון לגשת לפיירסטור של קלאס.

**הסימפטומים:**
- שגיאה "CRITICAL: Failed to parse FIRECLASS_SERVICE_ACCOUNT secret"
- שגיאות הרשאה בעת בדיקת מורה

**הפתרון:**
1. וודא שה-`FIRECLASS_SERVICE_ACCOUNT` מוגדר נכון
2. וודא שהערך הוא JSON מלא (כולל סוגריים מסולסלות)
3. וודא שה-Service Account יש לו הרשאות לקרוא לפיירסטור של קלאס

### 11.3. בעיות הרשאות Cloud Storage (הבעיה המרכזית)

**הבעיה:** שגיאות 500 עקב בעיות IAM עם makePublic() ו-publicUrl().

**הסימפטומים:**
- שגיאה "Failed to create access URL"
- שגיאות 500 בעת ניסיון לפרסם אפליקציה
- בעיות הרשאות ב-Cloud Storage

**הפתרונות שנוסו:**

#### ניסיון 1: Signed URLs
```javascript
const [signedUrl] = await file.getSignedUrl({
  action: "read",
  expires: Date.now() + 1000 * 60 * 60 * 24 * 365
});
```
**תוצאה:** עדיין בעיות IAM.

#### ניסיון 2: Download Tokens (הפתרון הסופי)
```javascript
const downloadToken = require('crypto').randomUUID();
await file.save(htmlContent, {
  contentType: 'text/html',
  metadata: {
    firebaseStorageDownloadTokens: downloadToken
  }
});

const longUrl = `https://firebasestorage.googleapis.com/v0/b/${bucket.name}/o/${encodedPath}?alt=media&token=${downloadToken}`;
```

### 11.4. אתחול Firebase Admin SDK

**הבעיה:** אי-ודאות לגבי הגדרת storageBucket באתחול.

**הפתרון:** אתחול מפורש עם storageBucket:
```javascript
admin.initializeApp({ storageBucket: 'fireclassstudio.firebasestorage.app' });
const bucket = admin.storage().bucket();
console.log(`🚀 Firebase Admin initialized with bucket: ${bucket.name}`);
```

### 11.5. URL Parsing ב-downloadCode

**הבעיה:** תמיכה בפורמטים שונים של URLs.

**הפתרון:** פענוח חכם של URLs:
```javascript
// תמיכה ב-Firebase Storage v0
if (u.hostname.includes("firebasestorage.googleapis.com") && u.pathname.includes(`/v0/b/${bucket.name}/o/`)) {
  filePath = decodeURIComponent(u.pathname.split(`/v0/b/${bucket.name}/o/`)[1]);
}
// תמיכה ב-Google Cloud Storage
else if (u.hostname.endsWith("googleapis.com") && u.pathname.startsWith(`/${bucket.name}/`)) {
  filePath = decodeURIComponent(u.pathname.slice(bucket.name.length + 2));
}
```

---

## שלב 12: בדיקה וניטור

### בדיקת הפונקציות

לאחר פריסה, בדוק את הלוגים ב-Firebase Console:

1. **פונקציות ענן > Logs**
2. **חפש הודעות:**
   - `🚀 Firebase Admin initialized with bucket: fireclassstudio.firebasestorage.app`
   - `📦 Bucket: fireclassstudio.firebasestorage.app, FilePath: apps/...`
   - `🔍 [DB-VERIFY] Starting teacher verification for...`
   - `🎯 [DB-VERIFY] Verification result for...: Found`

### בדיקת Storage

1. **Firebase Console > Storage > Files**
2. **חפש תיקיות:** `apps/<uid>/<timestamp>/`
3. **וודא שיש:** `index.html` עם מטא-דאטה

### בדיקת URLs

ה-URLs שנוצרים צריכים להיות בפורמט:
```
https://firebasestorage.googleapis.com/v0/b/fireclassstudio.firebasestorage.app/o/apps%2Fuid%2Ftimestamp%2Findex.html?alt=media&token=uuid
```

### בדיקת אימות המורה

1. **נסה להיכנס עם מורה רשום בקלאס**
2. **בדוק בלוגים:** `🎯 [DB-VERIFY] Verification result for...: Found`
3. **אם יש שגיאה:** בדוק את ה-`FIRECLASS_SERVICE_ACCOUNT`

---

## סיכום הפתרונות

**המערכת עברה מהפך מלא:**
- ❌ **makePublic()** → ✅ **Download Tokens**
- ❌ **publicUrl()** → ✅ **Firebase Storage v0 URLs**
- ❌ **Signed URLs** → ✅ **Download Tokens**
- ❌ **HttpsError שגוי** → ✅ **HttpsError נכון**
- ❌ **אתחול לא ברור** → ✅ **אתחול מפורש**
- ❌ **API חיצוני** → ✅ **גישה ישירה לפיירסטור של קלאס**

**התוצאה:** מערכת יציבה, מהירה, ובטוחה עם אינטגרציה מלאה של FireClass! 🚀

---

## הערות חשובות

1. **אל תעלה את קובץ ה-Service Account לגיט!** הוא מכיל מפתחות פרטיים.
2. **וודא שה-Service Account יש לו הרשאות לקרוא לפיירסטור של קלאס.**
3. **אחרי כל שינוי בקוד, תצטרך לפרוס מחדש את הפונקציות.**
4. **המנגנון החדש עובד רק עם מורים רשומים בקלאס.**


========================================================================================================================
FILE: C:\Users\Meir Livneh\Documents\fireclassStudio\docs\vibe_studio_spec.md
TYPE: .md
SIZE: 9247 characters
FOLDER: docs
========================================================================================================================

# Vibe Studio – Version 2.0 Specification

**Last Updated:** December 19, 2024  
**Status:** In Development

---

## 1. Vision & Core Philosophy

**Vibe Studio** is a *No-Code* web platform that empowers teachers to create interactive educational applets through natural dialogue with AI.

The platform supports both AI-guided creation for rapid development and manual code ingestion for maximum flexibility.

The guiding philosophy is that building a high-quality educational tool is not a single step, but a **multi-layered process**.

Version 2.0 introduces:
- **Pedagogical Personas** (the *How*)
- **Activity Templates** (the *What*)
- **Specific Content Definition** (the *Why*)

This layered workflow enables teachers to control pedagogy, structure, and content, while the AI handles technical implementation.

The system is fully **bilingual (Hebrew & English)**, including the interface and AI generation.

---

## 2. Core Technologies

- **Frontend:** HTML, Tailwind CSS, Vanilla JavaScript (Azure Static Web Apps)
- **Backend:** Firebase (US-Central1)
- **Authentication:** Firebase Authentication (Email Magic Link)
- **Database:** Firestore
- **Serverless Logic:** Firebase Cloud Functions
- **File Storage:** Firebase Cloud Storage (HTML applets with secure download tokens)
- **AI Model:** Google Gemini API (`gemini-2.5-flash`) with structured JSON output
- **FireClass Integration:** Direct Firestore access via Service Account

---

## 3. Creation Workflows

Vibe Studio offers two distinct creation paths to accommodate different teacher preferences and needs:

### Workflow A: AI-Guided Creation
The primary workflow is a guided dialogue with the AI in three steps:

#### Step 1: Choose the AI Persona (*The How*)
- Teachers select from a library of **AI Teacher Personas**, each representing a pedagogical style
- Examples: *Socratic Teacher, The Coach, The Demonstrator, The Storyteller, Gamified Teacher*
- Optional refinement: Teachers may add a short sentence (e.g., "...use a friendly and encouraging tone.")

#### Step 2: Choose the Activity Template (*The What*)
- Teachers select from **predefined Activity Templates** (JSON-based)
- Examples: *Quiz/Test, Drag & Drop Game, Puzzle, Simulation*
- Each template provides a structured prompt with placeholders

#### Step 3: Add Specific Content (*The Why*)
- Teachers fill in the template with actual content and context
- Example:  
  *"A quiz for 4th graders on the water cycle, 5 multiple-choice questions on evaporation, condensation, precipitation. Make it funny with animal characters."*

After generation, the teacher can refine via chat-like dialogue:  
*"Make question 3 harder," "Add scoring system," etc.*

### Workflow B: Manual Code Ingestion
For teachers who create applets using external tools (like ChatGPT, Claude, or a code editor), Vibe Studio offers a manual ingestion path.

**Paste Code:** The user pastes a complete, single-page HTML file into a dedicated modal window.

**Preview:** The system renders the pasted code in the live preview iframe.

**Refine (Optional):** The user can then leverage Vibe Studio's integrated Gemini AI to make iterative improvements on the pasted code.

**Publish:** The user manually fills in the applet's metadata (name, grade level, etc.) and uses the standard publishing workflow to save and share the applet.

---

## 4. Mega-Prompt Construction

The system builds a **Mega-Prompt** that combines all teacher selections into one structured request.

**Structure:**
```
--- Base System Instruction ---
You are an expert developer of single-file HTML educational applets.
Always respond with JSON matching the schema.

--- AI Persona (Teaching Style) ---
{Selected Persona Prompt}
{Optional teacher refinement}

--- Teacher's Request (Activity + Content) ---
{Completed Activity Template with filled-in content}
```

This **Mega-Prompt** is passed to the `askVibeAI` Cloud Function.

---

## 5. AI & Cloud Function: askVibeAI

- **Input:**
  - `prompt`: Mega-Prompt object (persona + template + content)
  - `language`: `"en"` or `"he"`

- **Logic:**
  - Combines system instructions with teacher input
  - Defines a rigid **JSON schema** for output
  - Calls Gemini API (`responseMimeType=application/json`)

- **Output (Schema):**
```json
{
  "htmlCode": "string (complete single-file HTML)",
  "metadata": {
    "appName": "string",
    "gradeLevel": "string",
    "domain": "string",
    "subDomain": "string",
    "pedagogicalExplanation": "string"
  }
}
```

---

## 6. Data Files

Two static JSON files define the libraries used in the UI:

- `public/data/personas.json` → AI Teacher Personas
- `public/data/prompts.json` → Activity Templates

Both support bilingual content (English/Hebrew).

---

## 7. User Interface

### 7.1 Views
- **Login Screen:** Email Magic Link authentication
- **Studio View:** Persona + Activity + Prompt + Live Preview
- **Gallery View:** Placeholder for community apps (to be expanded)

### 7.2 Features
- Language toggle (en/he), with full UI i18n
- Prompt box for dialogue
- Live Preview via `iframe.srcdoc`
- Auto-filled metadata form from AI JSON
- Publish button → triggers save to Firebase
- **External Code Ingestion:** Modal window for pasting HTML code from external sources
- **Dynamic Loading Messages:** Real-time progress updates during AI generation
- **Dual Creation Paths:** AI-guided creation and manual code ingestion workflows

---

## 8. Publishing Workflow

### 8.1 Publish Function (publishHtml)
- **Teacher Verification:** Direct Firestore query to FireClass database via Service Account
- **File Storage:** Saves applet HTML to Firebase Storage at: `apps/{uid}/{timestamp}/index.html`
- **URL Generation:** Creates secure public URL with download token
- **Bit.ly Integration:** Generates short link for sharing
- **Returns:** `{longUrl, shortUrl, qrCodeDataUrl}`

This function handles both applets generated by the internal AI and those ingested via the manual code pasting workflow. For manually pasted applets, all metadata is provided by the user directly in the publish tab.

### 8.2 Teacher Verification System
**New Architecture (v2.0):**
- **Primary App:** Vibe Studio (admin.initializeApp())
- **Secondary App:** FireClass (admin.initializeApp({credential: serviceAccount}, 'fireClassApp'))
- **Direct Access:** Queries FireClass Firestore directly via `teachers` collection
- **Query Field:** `profile.email` for exact teacher matching
- **Security:** Uses `FIRECLASS_SERVICE_ACCOUNT` secret for authentication

**Benefits:**
- No external API dependencies
- Faster response times
- More reliable verification
- Direct database access

### 8.3 Metadata Storage
**Firestore Collection:** `community_apps`

**Fields:**
- `appName`, `gradeLevel`, `domain`, `subDomain`
- `schoolCode` (default "00000")
- `pedagogicalExplanation`, `instructions`
- `app_url`, `teacher_uid`, `teacher_name`, `createdAt`

### 8.4 Update Function (updateAppDetails)
Teachers may update app details (only owner can edit).

---

## 9. Security & Permissions

- All Cloud Functions require authenticated users
- **Teacher Verification:** Direct Firestore access to FireClass database via Service Account
- **Service Account:** `FIRECLASS_SERVICE_ACCOUNT` secret contains full JSON credentials
- **Dual App Architecture:** Separate Firebase Admin instances for Studio and FireClass
- Firestore rules enforce: only the owner (`teacher_uid`) can update their apps
- Published apps are accessible only via secure download token URLs

---

## 10. Non-Functional Requirements

- **Responsiveness:** Generated applets must be mobile-friendly
- **Performance:** Applet preview injected in under ~3 seconds
- **Accessibility:** Clear labels, loading spinners, bilingual support
- **Reliability:** AI responses validated against schema
- **Code Quality:** Generated HTML must be single-file, Tailwind-based, readable, and commented
- **Teacher Verification:** Sub-second response time for database queries
- **User Experience:** Dynamic loading messages provide real-time feedback during AI generation
- **Flexibility:** Support for both AI-generated and manually pasted code with seamless workflow integration

---

## 11. Future Roadmap

### Version 3.0 (Enhanced FireClass Integration)
- Real-time sync of published apps to teacher's personal FireClass library
- Suggest apps to public library pending admin approval
- Advanced teacher analytics and usage tracking

### Version 4.0 (Hybrid Deployment Model)
To support teachers with multi-file projects (containing separate JS/CSS/image files) and to shift hosting costs, a hybrid deployment model will be introduced.

**Netlify Integration:** Teachers will be able to connect their personal Netlify account to Vibe Studio via a secure OAuth2 flow.

**Automated Deployment:** Vibe Studio will provide an interface for teachers to upload a .zip file of their project. The backend will then use the Netlify API to programmatically deploy the zipped project directly to the teacher's own Netlify account.

**Benefit:** This empowers advanced users and transitions the hosting responsibility for complex projects from the central platform to the individual teacher, creating a sustainable cost model.

---

*End of Specification*


================================================================================
SUMMARY: 25 files added
Folders searched: public, docs
================================================================================
